
9_tim2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800159c  0800159c  0001159c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800164c  0800164c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800164c  0800164c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800164c  0800164c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800164c  0800164c  0001164c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001650  08001650  00011650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080016b8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080016b8  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015a4  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000570  00000000  00000000  00021638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00021ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00021d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fae1  00000000  00000000  00021e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e0e  00000000  00000000  00031911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055396  00000000  00000000  0003371f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00088ab5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c28  00000000  00000000  00088b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001584 	.word	0x08001584

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001584 	.word	0x08001584

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#define GPIOAEN				(1U<<0)
#define PIN					(1U<<5)
#define LED_PIN				PIN

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <main+0x64>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a16      	ldr	r2, [pc, #88]	; (80002e4 <main+0x64>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= 1U<<10;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <main+0x68>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a14      	ldr	r2, [pc, #80]	; (80002e8 <main+0x68>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <main+0x68>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <main+0x68>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002a6:	6013      	str	r3, [r2, #0]

	usart2_tx_init();
 80002a8:	f000 f8f8 	bl	800049c <usart2_tx_init>
	tim2_1hz_init();
 80002ac:	f000 f8c4 	bl	8000438 <tim2_1hz_init>

	while(1)
	{

		/*Wait for update interrupt flag*/
		while(!(TIM2->SR & SR_UIF)){}
 80002b0:	bf00      	nop
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	f003 0301 	and.w	r3, r3, #1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d0f8      	beq.n	80002b2 <main+0x32>

		/*Clear update interrupt flag*/
		TIM2->SR &= ~(SR_UIF);
 80002c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c4:	691b      	ldr	r3, [r3, #16]
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	f023 0301 	bic.w	r3, r3, #1
 80002ce:	6113      	str	r3, [r2, #16]

		printf("1 second has passed \n\r");
 80002d0:	4806      	ldr	r0, [pc, #24]	; (80002ec <main+0x6c>)
 80002d2:	f000 f9c9 	bl	8000668 <iprintf>
		GPIOA->ODR ^= LED_PIN;
 80002d6:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <main+0x68>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a03      	ldr	r2, [pc, #12]	; (80002e8 <main+0x68>)
 80002dc:	f083 0320 	eor.w	r3, r3, #32
 80002e0:	6153      	str	r3, [r2, #20]
		while(!(TIM2->SR & SR_UIF)){}
 80002e2:	e7e5      	b.n	80002b0 <main+0x30>
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020000 	.word	0x40020000
 80002ec:	0800159c 	.word	0x0800159c

080002f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	e00a      	b.n	8000318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000302:	f3af 8000 	nop.w
 8000306:	4601      	mov	r1, r0
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	60ba      	str	r2, [r7, #8]
 800030e:	b2ca      	uxtb	r2, r1
 8000310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	3301      	adds	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	429a      	cmp	r2, r3
 800031e:	dbf0      	blt.n	8000302 <_read+0x12>
  }

  return len;
 8000320:	687b      	ldr	r3, [r7, #4]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b086      	sub	sp, #24
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	e009      	b.n	8000350 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	1c5a      	adds	r2, r3, #1
 8000340:	60ba      	str	r2, [r7, #8]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f89d 	bl	8000484 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	3301      	adds	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf1      	blt.n	800033c <_write+0x12>
  }
  return len;
 8000358:	687b      	ldr	r3, [r7, #4]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_close>:

int _close(int file)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800036a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800037a:	b480      	push	{r7}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800038a:	605a      	str	r2, [r3, #4]
  return 0;
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <_isatty>:

int _isatty(int file)
{
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003a2:	2301      	movs	r3, #1
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003d4:	4a14      	ldr	r2, [pc, #80]	; (8000428 <_sbrk+0x5c>)
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <_sbrk+0x60>)
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <_sbrk+0x64>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d102      	bne.n	80003ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <_sbrk+0x64>)
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <_sbrk+0x68>)
 80003ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <_sbrk+0x64>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4413      	add	r3, r2
 80003f6:	693a      	ldr	r2, [r7, #16]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d207      	bcs.n	800040c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003fc:	f000 f902 	bl	8000604 <__errno>
 8000400:	4603      	mov	r3, r0
 8000402:	220c      	movs	r2, #12
 8000404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000406:	f04f 33ff 	mov.w	r3, #4294967295
 800040a:	e009      	b.n	8000420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <_sbrk+0x64>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000412:	4b07      	ldr	r3, [pc, #28]	; (8000430 <_sbrk+0x64>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4413      	add	r3, r2
 800041a:	4a05      	ldr	r2, [pc, #20]	; (8000430 <_sbrk+0x64>)
 800041c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800041e:	68fb      	ldr	r3, [r7, #12]
}
 8000420:	4618      	mov	r0, r3
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20020000 	.word	0x20020000
 800042c:	00000400 	.word	0x00000400
 8000430:	20000080 	.word	0x20000080
 8000434:	20000098 	.word	0x20000098

08000438 <tim2_1hz_init>:

#define OC_TOGGLE		((1U<<4) | (1U<<5))
#define OC_EN			(1U<<0)

void tim2_1hz_init(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	/*Enable clock access to APB1*/
	RCC->APB1ENR |= TIM2EN;
 800043c:	4b10      	ldr	r3, [pc, #64]	; (8000480 <tim2_1hz_init+0x48>)
 800043e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000440:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <tim2_1hz_init+0x48>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler*/
	TIM2->PSC = 1600 - 1; // 16 000 000 / 1 600 = 10 000
 8000448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800044c:	f240 623f 	movw	r2, #1599	; 0x63f
 8000450:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value*/
	TIM2->ARR = 10000 - 1; // 10 000/ 10 000 = 1
 8000452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000456:	f242 720f 	movw	r2, #9999	; 0x270f
 800045a:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Clear counter*/
	TIM2->CNT = 0;
 800045c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000460:	2200      	movs	r2, #0
 8000462:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable timer*/
	TIM2->CR1 |= OC_EN;
 8000464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	6013      	str	r3, [r2, #0]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40023800 	.word	0x40023800

08000484 <__io_putchar>:
void usart_write(int ch);


/*To enable use of printf; __io_putchar in syscalls.c*/
int __io_putchar(int ch)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	usart_write(ch);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 f877 	bl	8000580 <usart_write>
	return ch;
 8000492:	687b      	ldr	r3, [r7, #4]
}
 8000494:	4618      	mov	r0, r3
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <usart2_tx_init>:

void usart2_tx_init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	/********Configure GPIOA pin 2 to desired alternate function********/
	/*clock access enable*/
	RCC->AHB1ENR |= GPIOAEN;
 80004a0:	4b20      	ldr	r3, [pc, #128]	; (8000524 <usart2_tx_init+0x88>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a1f      	ldr	r2, [pc, #124]	; (8000524 <usart2_tx_init+0x88>)
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30

	/*Change in MODER to alternate function mode*/
	GPIOA->MODER &= ~(1U<<4);
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <usart2_tx_init+0x8c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <usart2_tx_init+0x8c>)
 80004b2:	f023 0310 	bic.w	r3, r3, #16
 80004b6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <usart2_tx_init+0x8c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1a      	ldr	r2, [pc, #104]	; (8000528 <usart2_tx_init+0x8c>)
 80004be:	f043 0320 	orr.w	r3, r3, #32
 80004c2:	6013      	str	r3, [r2, #0]

	/*Alternate Function Type Register (which type of alternate function to operate*/
	GPIOA->AFR[0] |= (1U<<8);
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <usart2_tx_init+0x8c>)
 80004c6:	6a1b      	ldr	r3, [r3, #32]
 80004c8:	4a17      	ldr	r2, [pc, #92]	; (8000528 <usart2_tx_init+0x8c>)
 80004ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <usart2_tx_init+0x8c>)
 80004d2:	6a1b      	ldr	r3, [r3, #32]
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <usart2_tx_init+0x8c>)
 80004d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <usart2_tx_init+0x8c>)
 80004de:	6a1b      	ldr	r3, [r3, #32]
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <usart2_tx_init+0x8c>)
 80004e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <usart2_tx_init+0x8c>)
 80004ea:	6a1b      	ldr	r3, [r3, #32]
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <usart2_tx_init+0x8c>)
 80004ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004f2:	6213      	str	r3, [r2, #32]


	/***********Configure USART2 module**********/
	/*clock access enable(APB1 bus)*/
	RCC->APB1ENR |= USART2EN;
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <usart2_tx_init+0x88>)
 80004f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <usart2_tx_init+0x88>)
 80004fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fe:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure Baud Rate(Store in baud rate register(BRR) of USART_Typedef*/
	usart_set_baud_rate(USART2, APB1_CLK, BAUD_RATE);
 8000500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000504:	4909      	ldr	r1, [pc, #36]	; (800052c <usart2_tx_init+0x90>)
 8000506:	480a      	ldr	r0, [pc, #40]	; (8000530 <usart2_tx_init+0x94>)
 8000508:	f000 f814 	bl	8000534 <usart_set_baud_rate>

	/*Enable USART_TX*/
	USART2->CR1 = USART_TE; //why not bitwise OR?? - Set all bits except TE to 0
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <usart2_tx_init+0x94>)
 800050e:	2208      	movs	r2, #8
 8000510:	60da      	str	r2, [r3, #12]

	/*Enable USART communication*/
	USART2->CR1 |= USART_EN;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <usart2_tx_init+0x94>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	4a06      	ldr	r2, [pc, #24]	; (8000530 <usart2_tx_init+0x94>)
 8000518:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800051c:	60d3      	str	r3, [r2, #12]

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40023800 	.word	0x40023800
 8000528:	40020000 	.word	0x40020000
 800052c:	00f42400 	.word	0x00f42400
 8000530:	40004400 	.word	0x40004400

08000534 <usart_set_baud_rate>:


static void usart_set_baud_rate(USART_TypeDef* USARTx, uint32_t periph_clk, uint32_t baudrate)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = calculate_usart_bd(periph_clk, baudrate);
 8000540:	6879      	ldr	r1, [r7, #4]
 8000542:	68b8      	ldr	r0, [r7, #8]
 8000544:	f000 f808 	bl	8000558 <calculate_usart_bd>
 8000548:	4603      	mov	r3, r0
 800054a:	461a      	mov	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	609a      	str	r2, [r3, #8]
}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <calculate_usart_bd>:

uint16_t calculate_usart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U)) / baudrate); //EMPIRICAL FORMULA
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	085a      	lsrs	r2, r3, #1
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	441a      	add	r2, r3
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000570:	b29b      	uxth	r3, r3
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <usart_write>:

void usart_write(int ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & USART_TXE)){}
 8000588:	bf00      	nop
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <usart_write+0x2c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <usart_write+0xa>

	/*Write data*/
	USART2->DR = (ch & 0XFF);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <usart_write+0x2c>)
 800059a:	b2db      	uxtb	r3, r3
 800059c:	6053      	str	r3, [r2, #4]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40004400 	.word	0x40004400

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005de:	f000 f817 	bl	8000610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe4d 	bl	8000280 <main>

080005e6 <LoopForever>:

LoopForever:
  b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005f4:	08001654 	.word	0x08001654
  ldr r2, =_sbss
 80005f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005fc:	20000094 	.word	0x20000094

08000600 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC_IRQHandler>
	...

08000604 <__errno>:
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <__errno+0x8>)
 8000606:	6818      	ldr	r0, [r3, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000000 	.word	0x20000000

08000610 <__libc_init_array>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	4d0d      	ldr	r5, [pc, #52]	; (8000648 <__libc_init_array+0x38>)
 8000614:	4c0d      	ldr	r4, [pc, #52]	; (800064c <__libc_init_array+0x3c>)
 8000616:	1b64      	subs	r4, r4, r5
 8000618:	10a4      	asrs	r4, r4, #2
 800061a:	2600      	movs	r6, #0
 800061c:	42a6      	cmp	r6, r4
 800061e:	d109      	bne.n	8000634 <__libc_init_array+0x24>
 8000620:	4d0b      	ldr	r5, [pc, #44]	; (8000650 <__libc_init_array+0x40>)
 8000622:	4c0c      	ldr	r4, [pc, #48]	; (8000654 <__libc_init_array+0x44>)
 8000624:	f000 ffae 	bl	8001584 <_init>
 8000628:	1b64      	subs	r4, r4, r5
 800062a:	10a4      	asrs	r4, r4, #2
 800062c:	2600      	movs	r6, #0
 800062e:	42a6      	cmp	r6, r4
 8000630:	d105      	bne.n	800063e <__libc_init_array+0x2e>
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f855 3b04 	ldr.w	r3, [r5], #4
 8000638:	4798      	blx	r3
 800063a:	3601      	adds	r6, #1
 800063c:	e7ee      	b.n	800061c <__libc_init_array+0xc>
 800063e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000642:	4798      	blx	r3
 8000644:	3601      	adds	r6, #1
 8000646:	e7f2      	b.n	800062e <__libc_init_array+0x1e>
 8000648:	0800164c 	.word	0x0800164c
 800064c:	0800164c 	.word	0x0800164c
 8000650:	0800164c 	.word	0x0800164c
 8000654:	08001650 	.word	0x08001650

08000658 <memset>:
 8000658:	4402      	add	r2, r0
 800065a:	4603      	mov	r3, r0
 800065c:	4293      	cmp	r3, r2
 800065e:	d100      	bne.n	8000662 <memset+0xa>
 8000660:	4770      	bx	lr
 8000662:	f803 1b01 	strb.w	r1, [r3], #1
 8000666:	e7f9      	b.n	800065c <memset+0x4>

08000668 <iprintf>:
 8000668:	b40f      	push	{r0, r1, r2, r3}
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <iprintf+0x2c>)
 800066c:	b513      	push	{r0, r1, r4, lr}
 800066e:	681c      	ldr	r4, [r3, #0]
 8000670:	b124      	cbz	r4, 800067c <iprintf+0x14>
 8000672:	69a3      	ldr	r3, [r4, #24]
 8000674:	b913      	cbnz	r3, 800067c <iprintf+0x14>
 8000676:	4620      	mov	r0, r4
 8000678:	f000 f866 	bl	8000748 <__sinit>
 800067c:	ab05      	add	r3, sp, #20
 800067e:	9a04      	ldr	r2, [sp, #16]
 8000680:	68a1      	ldr	r1, [r4, #8]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4620      	mov	r0, r4
 8000686:	f000 f9bd 	bl	8000a04 <_vfiprintf_r>
 800068a:	b002      	add	sp, #8
 800068c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000690:	b004      	add	sp, #16
 8000692:	4770      	bx	lr
 8000694:	20000000 	.word	0x20000000

08000698 <std>:
 8000698:	2300      	movs	r3, #0
 800069a:	b510      	push	{r4, lr}
 800069c:	4604      	mov	r4, r0
 800069e:	e9c0 3300 	strd	r3, r3, [r0]
 80006a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006a6:	6083      	str	r3, [r0, #8]
 80006a8:	8181      	strh	r1, [r0, #12]
 80006aa:	6643      	str	r3, [r0, #100]	; 0x64
 80006ac:	81c2      	strh	r2, [r0, #14]
 80006ae:	6183      	str	r3, [r0, #24]
 80006b0:	4619      	mov	r1, r3
 80006b2:	2208      	movs	r2, #8
 80006b4:	305c      	adds	r0, #92	; 0x5c
 80006b6:	f7ff ffcf 	bl	8000658 <memset>
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <std+0x38>)
 80006bc:	6263      	str	r3, [r4, #36]	; 0x24
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <std+0x3c>)
 80006c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <std+0x40>)
 80006c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <std+0x44>)
 80006c8:	6224      	str	r4, [r4, #32]
 80006ca:	6323      	str	r3, [r4, #48]	; 0x30
 80006cc:	bd10      	pop	{r4, pc}
 80006ce:	bf00      	nop
 80006d0:	08000fad 	.word	0x08000fad
 80006d4:	08000fcf 	.word	0x08000fcf
 80006d8:	08001007 	.word	0x08001007
 80006dc:	0800102b 	.word	0x0800102b

080006e0 <_cleanup_r>:
 80006e0:	4901      	ldr	r1, [pc, #4]	; (80006e8 <_cleanup_r+0x8>)
 80006e2:	f000 b8af 	b.w	8000844 <_fwalk_reent>
 80006e6:	bf00      	nop
 80006e8:	08001305 	.word	0x08001305

080006ec <__sfmoreglue>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	2268      	movs	r2, #104	; 0x68
 80006f0:	1e4d      	subs	r5, r1, #1
 80006f2:	4355      	muls	r5, r2
 80006f4:	460e      	mov	r6, r1
 80006f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80006fa:	f000 f8e5 	bl	80008c8 <_malloc_r>
 80006fe:	4604      	mov	r4, r0
 8000700:	b140      	cbz	r0, 8000714 <__sfmoreglue+0x28>
 8000702:	2100      	movs	r1, #0
 8000704:	e9c0 1600 	strd	r1, r6, [r0]
 8000708:	300c      	adds	r0, #12
 800070a:	60a0      	str	r0, [r4, #8]
 800070c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000710:	f7ff ffa2 	bl	8000658 <memset>
 8000714:	4620      	mov	r0, r4
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__sfp_lock_acquire>:
 8000718:	4801      	ldr	r0, [pc, #4]	; (8000720 <__sfp_lock_acquire+0x8>)
 800071a:	f000 b8b3 	b.w	8000884 <__retarget_lock_acquire_recursive>
 800071e:	bf00      	nop
 8000720:	20000085 	.word	0x20000085

08000724 <__sfp_lock_release>:
 8000724:	4801      	ldr	r0, [pc, #4]	; (800072c <__sfp_lock_release+0x8>)
 8000726:	f000 b8ae 	b.w	8000886 <__retarget_lock_release_recursive>
 800072a:	bf00      	nop
 800072c:	20000085 	.word	0x20000085

08000730 <__sinit_lock_acquire>:
 8000730:	4801      	ldr	r0, [pc, #4]	; (8000738 <__sinit_lock_acquire+0x8>)
 8000732:	f000 b8a7 	b.w	8000884 <__retarget_lock_acquire_recursive>
 8000736:	bf00      	nop
 8000738:	20000086 	.word	0x20000086

0800073c <__sinit_lock_release>:
 800073c:	4801      	ldr	r0, [pc, #4]	; (8000744 <__sinit_lock_release+0x8>)
 800073e:	f000 b8a2 	b.w	8000886 <__retarget_lock_release_recursive>
 8000742:	bf00      	nop
 8000744:	20000086 	.word	0x20000086

08000748 <__sinit>:
 8000748:	b510      	push	{r4, lr}
 800074a:	4604      	mov	r4, r0
 800074c:	f7ff fff0 	bl	8000730 <__sinit_lock_acquire>
 8000750:	69a3      	ldr	r3, [r4, #24]
 8000752:	b11b      	cbz	r3, 800075c <__sinit+0x14>
 8000754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000758:	f7ff bff0 	b.w	800073c <__sinit_lock_release>
 800075c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000760:	6523      	str	r3, [r4, #80]	; 0x50
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <__sinit+0x68>)
 8000764:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <__sinit+0x6c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	62a2      	str	r2, [r4, #40]	; 0x28
 800076a:	42a3      	cmp	r3, r4
 800076c:	bf04      	itt	eq
 800076e:	2301      	moveq	r3, #1
 8000770:	61a3      	streq	r3, [r4, #24]
 8000772:	4620      	mov	r0, r4
 8000774:	f000 f820 	bl	80007b8 <__sfp>
 8000778:	6060      	str	r0, [r4, #4]
 800077a:	4620      	mov	r0, r4
 800077c:	f000 f81c 	bl	80007b8 <__sfp>
 8000780:	60a0      	str	r0, [r4, #8]
 8000782:	4620      	mov	r0, r4
 8000784:	f000 f818 	bl	80007b8 <__sfp>
 8000788:	2200      	movs	r2, #0
 800078a:	60e0      	str	r0, [r4, #12]
 800078c:	2104      	movs	r1, #4
 800078e:	6860      	ldr	r0, [r4, #4]
 8000790:	f7ff ff82 	bl	8000698 <std>
 8000794:	68a0      	ldr	r0, [r4, #8]
 8000796:	2201      	movs	r2, #1
 8000798:	2109      	movs	r1, #9
 800079a:	f7ff ff7d 	bl	8000698 <std>
 800079e:	68e0      	ldr	r0, [r4, #12]
 80007a0:	2202      	movs	r2, #2
 80007a2:	2112      	movs	r1, #18
 80007a4:	f7ff ff78 	bl	8000698 <std>
 80007a8:	2301      	movs	r3, #1
 80007aa:	61a3      	str	r3, [r4, #24]
 80007ac:	e7d2      	b.n	8000754 <__sinit+0xc>
 80007ae:	bf00      	nop
 80007b0:	080015b4 	.word	0x080015b4
 80007b4:	080006e1 	.word	0x080006e1

080007b8 <__sfp>:
 80007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ba:	4607      	mov	r7, r0
 80007bc:	f7ff ffac 	bl	8000718 <__sfp_lock_acquire>
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <__sfp+0x84>)
 80007c2:	681e      	ldr	r6, [r3, #0]
 80007c4:	69b3      	ldr	r3, [r6, #24]
 80007c6:	b913      	cbnz	r3, 80007ce <__sfp+0x16>
 80007c8:	4630      	mov	r0, r6
 80007ca:	f7ff ffbd 	bl	8000748 <__sinit>
 80007ce:	3648      	adds	r6, #72	; 0x48
 80007d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	d503      	bpl.n	80007e0 <__sfp+0x28>
 80007d8:	6833      	ldr	r3, [r6, #0]
 80007da:	b30b      	cbz	r3, 8000820 <__sfp+0x68>
 80007dc:	6836      	ldr	r6, [r6, #0]
 80007de:	e7f7      	b.n	80007d0 <__sfp+0x18>
 80007e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80007e4:	b9d5      	cbnz	r5, 800081c <__sfp+0x64>
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <__sfp+0x88>)
 80007e8:	60e3      	str	r3, [r4, #12]
 80007ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007ee:	6665      	str	r5, [r4, #100]	; 0x64
 80007f0:	f000 f847 	bl	8000882 <__retarget_lock_init_recursive>
 80007f4:	f7ff ff96 	bl	8000724 <__sfp_lock_release>
 80007f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80007fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000800:	6025      	str	r5, [r4, #0]
 8000802:	61a5      	str	r5, [r4, #24]
 8000804:	2208      	movs	r2, #8
 8000806:	4629      	mov	r1, r5
 8000808:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800080c:	f7ff ff24 	bl	8000658 <memset>
 8000810:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000814:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000818:	4620      	mov	r0, r4
 800081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081c:	3468      	adds	r4, #104	; 0x68
 800081e:	e7d9      	b.n	80007d4 <__sfp+0x1c>
 8000820:	2104      	movs	r1, #4
 8000822:	4638      	mov	r0, r7
 8000824:	f7ff ff62 	bl	80006ec <__sfmoreglue>
 8000828:	4604      	mov	r4, r0
 800082a:	6030      	str	r0, [r6, #0]
 800082c:	2800      	cmp	r0, #0
 800082e:	d1d5      	bne.n	80007dc <__sfp+0x24>
 8000830:	f7ff ff78 	bl	8000724 <__sfp_lock_release>
 8000834:	230c      	movs	r3, #12
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	e7ee      	b.n	8000818 <__sfp+0x60>
 800083a:	bf00      	nop
 800083c:	080015b4 	.word	0x080015b4
 8000840:	ffff0001 	.word	0xffff0001

08000844 <_fwalk_reent>:
 8000844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000848:	4606      	mov	r6, r0
 800084a:	4688      	mov	r8, r1
 800084c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000850:	2700      	movs	r7, #0
 8000852:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000856:	f1b9 0901 	subs.w	r9, r9, #1
 800085a:	d505      	bpl.n	8000868 <_fwalk_reent+0x24>
 800085c:	6824      	ldr	r4, [r4, #0]
 800085e:	2c00      	cmp	r4, #0
 8000860:	d1f7      	bne.n	8000852 <_fwalk_reent+0xe>
 8000862:	4638      	mov	r0, r7
 8000864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000868:	89ab      	ldrh	r3, [r5, #12]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d907      	bls.n	800087e <_fwalk_reent+0x3a>
 800086e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000872:	3301      	adds	r3, #1
 8000874:	d003      	beq.n	800087e <_fwalk_reent+0x3a>
 8000876:	4629      	mov	r1, r5
 8000878:	4630      	mov	r0, r6
 800087a:	47c0      	blx	r8
 800087c:	4307      	orrs	r7, r0
 800087e:	3568      	adds	r5, #104	; 0x68
 8000880:	e7e9      	b.n	8000856 <_fwalk_reent+0x12>

08000882 <__retarget_lock_init_recursive>:
 8000882:	4770      	bx	lr

08000884 <__retarget_lock_acquire_recursive>:
 8000884:	4770      	bx	lr

08000886 <__retarget_lock_release_recursive>:
 8000886:	4770      	bx	lr

08000888 <sbrk_aligned>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	4e0e      	ldr	r6, [pc, #56]	; (80008c4 <sbrk_aligned+0x3c>)
 800088c:	460c      	mov	r4, r1
 800088e:	6831      	ldr	r1, [r6, #0]
 8000890:	4605      	mov	r5, r0
 8000892:	b911      	cbnz	r1, 800089a <sbrk_aligned+0x12>
 8000894:	f000 fb7a 	bl	8000f8c <_sbrk_r>
 8000898:	6030      	str	r0, [r6, #0]
 800089a:	4621      	mov	r1, r4
 800089c:	4628      	mov	r0, r5
 800089e:	f000 fb75 	bl	8000f8c <_sbrk_r>
 80008a2:	1c43      	adds	r3, r0, #1
 80008a4:	d00a      	beq.n	80008bc <sbrk_aligned+0x34>
 80008a6:	1cc4      	adds	r4, r0, #3
 80008a8:	f024 0403 	bic.w	r4, r4, #3
 80008ac:	42a0      	cmp	r0, r4
 80008ae:	d007      	beq.n	80008c0 <sbrk_aligned+0x38>
 80008b0:	1a21      	subs	r1, r4, r0
 80008b2:	4628      	mov	r0, r5
 80008b4:	f000 fb6a 	bl	8000f8c <_sbrk_r>
 80008b8:	3001      	adds	r0, #1
 80008ba:	d101      	bne.n	80008c0 <sbrk_aligned+0x38>
 80008bc:	f04f 34ff 	mov.w	r4, #4294967295
 80008c0:	4620      	mov	r0, r4
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
 80008c4:	2000008c 	.word	0x2000008c

080008c8 <_malloc_r>:
 80008c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008cc:	1ccd      	adds	r5, r1, #3
 80008ce:	f025 0503 	bic.w	r5, r5, #3
 80008d2:	3508      	adds	r5, #8
 80008d4:	2d0c      	cmp	r5, #12
 80008d6:	bf38      	it	cc
 80008d8:	250c      	movcc	r5, #12
 80008da:	2d00      	cmp	r5, #0
 80008dc:	4607      	mov	r7, r0
 80008de:	db01      	blt.n	80008e4 <_malloc_r+0x1c>
 80008e0:	42a9      	cmp	r1, r5
 80008e2:	d905      	bls.n	80008f0 <_malloc_r+0x28>
 80008e4:	230c      	movs	r3, #12
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	2600      	movs	r6, #0
 80008ea:	4630      	mov	r0, r6
 80008ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008f0:	4e2e      	ldr	r6, [pc, #184]	; (80009ac <_malloc_r+0xe4>)
 80008f2:	f000 fdbb 	bl	800146c <__malloc_lock>
 80008f6:	6833      	ldr	r3, [r6, #0]
 80008f8:	461c      	mov	r4, r3
 80008fa:	bb34      	cbnz	r4, 800094a <_malloc_r+0x82>
 80008fc:	4629      	mov	r1, r5
 80008fe:	4638      	mov	r0, r7
 8000900:	f7ff ffc2 	bl	8000888 <sbrk_aligned>
 8000904:	1c43      	adds	r3, r0, #1
 8000906:	4604      	mov	r4, r0
 8000908:	d14d      	bne.n	80009a6 <_malloc_r+0xde>
 800090a:	6834      	ldr	r4, [r6, #0]
 800090c:	4626      	mov	r6, r4
 800090e:	2e00      	cmp	r6, #0
 8000910:	d140      	bne.n	8000994 <_malloc_r+0xcc>
 8000912:	6823      	ldr	r3, [r4, #0]
 8000914:	4631      	mov	r1, r6
 8000916:	4638      	mov	r0, r7
 8000918:	eb04 0803 	add.w	r8, r4, r3
 800091c:	f000 fb36 	bl	8000f8c <_sbrk_r>
 8000920:	4580      	cmp	r8, r0
 8000922:	d13a      	bne.n	800099a <_malloc_r+0xd2>
 8000924:	6821      	ldr	r1, [r4, #0]
 8000926:	3503      	adds	r5, #3
 8000928:	1a6d      	subs	r5, r5, r1
 800092a:	f025 0503 	bic.w	r5, r5, #3
 800092e:	3508      	adds	r5, #8
 8000930:	2d0c      	cmp	r5, #12
 8000932:	bf38      	it	cc
 8000934:	250c      	movcc	r5, #12
 8000936:	4629      	mov	r1, r5
 8000938:	4638      	mov	r0, r7
 800093a:	f7ff ffa5 	bl	8000888 <sbrk_aligned>
 800093e:	3001      	adds	r0, #1
 8000940:	d02b      	beq.n	800099a <_malloc_r+0xd2>
 8000942:	6823      	ldr	r3, [r4, #0]
 8000944:	442b      	add	r3, r5
 8000946:	6023      	str	r3, [r4, #0]
 8000948:	e00e      	b.n	8000968 <_malloc_r+0xa0>
 800094a:	6822      	ldr	r2, [r4, #0]
 800094c:	1b52      	subs	r2, r2, r5
 800094e:	d41e      	bmi.n	800098e <_malloc_r+0xc6>
 8000950:	2a0b      	cmp	r2, #11
 8000952:	d916      	bls.n	8000982 <_malloc_r+0xba>
 8000954:	1961      	adds	r1, r4, r5
 8000956:	42a3      	cmp	r3, r4
 8000958:	6025      	str	r5, [r4, #0]
 800095a:	bf18      	it	ne
 800095c:	6059      	strne	r1, [r3, #4]
 800095e:	6863      	ldr	r3, [r4, #4]
 8000960:	bf08      	it	eq
 8000962:	6031      	streq	r1, [r6, #0]
 8000964:	5162      	str	r2, [r4, r5]
 8000966:	604b      	str	r3, [r1, #4]
 8000968:	4638      	mov	r0, r7
 800096a:	f104 060b 	add.w	r6, r4, #11
 800096e:	f000 fd83 	bl	8001478 <__malloc_unlock>
 8000972:	f026 0607 	bic.w	r6, r6, #7
 8000976:	1d23      	adds	r3, r4, #4
 8000978:	1af2      	subs	r2, r6, r3
 800097a:	d0b6      	beq.n	80008ea <_malloc_r+0x22>
 800097c:	1b9b      	subs	r3, r3, r6
 800097e:	50a3      	str	r3, [r4, r2]
 8000980:	e7b3      	b.n	80008ea <_malloc_r+0x22>
 8000982:	6862      	ldr	r2, [r4, #4]
 8000984:	42a3      	cmp	r3, r4
 8000986:	bf0c      	ite	eq
 8000988:	6032      	streq	r2, [r6, #0]
 800098a:	605a      	strne	r2, [r3, #4]
 800098c:	e7ec      	b.n	8000968 <_malloc_r+0xa0>
 800098e:	4623      	mov	r3, r4
 8000990:	6864      	ldr	r4, [r4, #4]
 8000992:	e7b2      	b.n	80008fa <_malloc_r+0x32>
 8000994:	4634      	mov	r4, r6
 8000996:	6876      	ldr	r6, [r6, #4]
 8000998:	e7b9      	b.n	800090e <_malloc_r+0x46>
 800099a:	230c      	movs	r3, #12
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4638      	mov	r0, r7
 80009a0:	f000 fd6a 	bl	8001478 <__malloc_unlock>
 80009a4:	e7a1      	b.n	80008ea <_malloc_r+0x22>
 80009a6:	6025      	str	r5, [r4, #0]
 80009a8:	e7de      	b.n	8000968 <_malloc_r+0xa0>
 80009aa:	bf00      	nop
 80009ac:	20000088 	.word	0x20000088

080009b0 <__sfputc_r>:
 80009b0:	6893      	ldr	r3, [r2, #8]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	b410      	push	{r4}
 80009b8:	6093      	str	r3, [r2, #8]
 80009ba:	da08      	bge.n	80009ce <__sfputc_r+0x1e>
 80009bc:	6994      	ldr	r4, [r2, #24]
 80009be:	42a3      	cmp	r3, r4
 80009c0:	db01      	blt.n	80009c6 <__sfputc_r+0x16>
 80009c2:	290a      	cmp	r1, #10
 80009c4:	d103      	bne.n	80009ce <__sfputc_r+0x1e>
 80009c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009ca:	f000 bb33 	b.w	8001034 <__swbuf_r>
 80009ce:	6813      	ldr	r3, [r2, #0]
 80009d0:	1c58      	adds	r0, r3, #1
 80009d2:	6010      	str	r0, [r2, #0]
 80009d4:	7019      	strb	r1, [r3, #0]
 80009d6:	4608      	mov	r0, r1
 80009d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009dc:	4770      	bx	lr

080009de <__sfputs_r>:
 80009de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e0:	4606      	mov	r6, r0
 80009e2:	460f      	mov	r7, r1
 80009e4:	4614      	mov	r4, r2
 80009e6:	18d5      	adds	r5, r2, r3
 80009e8:	42ac      	cmp	r4, r5
 80009ea:	d101      	bne.n	80009f0 <__sfputs_r+0x12>
 80009ec:	2000      	movs	r0, #0
 80009ee:	e007      	b.n	8000a00 <__sfputs_r+0x22>
 80009f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009f4:	463a      	mov	r2, r7
 80009f6:	4630      	mov	r0, r6
 80009f8:	f7ff ffda 	bl	80009b0 <__sfputc_r>
 80009fc:	1c43      	adds	r3, r0, #1
 80009fe:	d1f3      	bne.n	80009e8 <__sfputs_r+0xa>
 8000a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a04 <_vfiprintf_r>:
 8000a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a08:	460d      	mov	r5, r1
 8000a0a:	b09d      	sub	sp, #116	; 0x74
 8000a0c:	4614      	mov	r4, r2
 8000a0e:	4698      	mov	r8, r3
 8000a10:	4606      	mov	r6, r0
 8000a12:	b118      	cbz	r0, 8000a1c <_vfiprintf_r+0x18>
 8000a14:	6983      	ldr	r3, [r0, #24]
 8000a16:	b90b      	cbnz	r3, 8000a1c <_vfiprintf_r+0x18>
 8000a18:	f7ff fe96 	bl	8000748 <__sinit>
 8000a1c:	4b89      	ldr	r3, [pc, #548]	; (8000c44 <_vfiprintf_r+0x240>)
 8000a1e:	429d      	cmp	r5, r3
 8000a20:	d11b      	bne.n	8000a5a <_vfiprintf_r+0x56>
 8000a22:	6875      	ldr	r5, [r6, #4]
 8000a24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a26:	07d9      	lsls	r1, r3, #31
 8000a28:	d405      	bmi.n	8000a36 <_vfiprintf_r+0x32>
 8000a2a:	89ab      	ldrh	r3, [r5, #12]
 8000a2c:	059a      	lsls	r2, r3, #22
 8000a2e:	d402      	bmi.n	8000a36 <_vfiprintf_r+0x32>
 8000a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a32:	f7ff ff27 	bl	8000884 <__retarget_lock_acquire_recursive>
 8000a36:	89ab      	ldrh	r3, [r5, #12]
 8000a38:	071b      	lsls	r3, r3, #28
 8000a3a:	d501      	bpl.n	8000a40 <_vfiprintf_r+0x3c>
 8000a3c:	692b      	ldr	r3, [r5, #16]
 8000a3e:	b9eb      	cbnz	r3, 8000a7c <_vfiprintf_r+0x78>
 8000a40:	4629      	mov	r1, r5
 8000a42:	4630      	mov	r0, r6
 8000a44:	f000 fb5a 	bl	80010fc <__swsetup_r>
 8000a48:	b1c0      	cbz	r0, 8000a7c <_vfiprintf_r+0x78>
 8000a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a4c:	07dc      	lsls	r4, r3, #31
 8000a4e:	d50e      	bpl.n	8000a6e <_vfiprintf_r+0x6a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	b01d      	add	sp, #116	; 0x74
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5a:	4b7b      	ldr	r3, [pc, #492]	; (8000c48 <_vfiprintf_r+0x244>)
 8000a5c:	429d      	cmp	r5, r3
 8000a5e:	d101      	bne.n	8000a64 <_vfiprintf_r+0x60>
 8000a60:	68b5      	ldr	r5, [r6, #8]
 8000a62:	e7df      	b.n	8000a24 <_vfiprintf_r+0x20>
 8000a64:	4b79      	ldr	r3, [pc, #484]	; (8000c4c <_vfiprintf_r+0x248>)
 8000a66:	429d      	cmp	r5, r3
 8000a68:	bf08      	it	eq
 8000a6a:	68f5      	ldreq	r5, [r6, #12]
 8000a6c:	e7da      	b.n	8000a24 <_vfiprintf_r+0x20>
 8000a6e:	89ab      	ldrh	r3, [r5, #12]
 8000a70:	0598      	lsls	r0, r3, #22
 8000a72:	d4ed      	bmi.n	8000a50 <_vfiprintf_r+0x4c>
 8000a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a76:	f7ff ff06 	bl	8000886 <__retarget_lock_release_recursive>
 8000a7a:	e7e9      	b.n	8000a50 <_vfiprintf_r+0x4c>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8000a80:	2320      	movs	r3, #32
 8000a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a86:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a8a:	2330      	movs	r3, #48	; 0x30
 8000a8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c50 <_vfiprintf_r+0x24c>
 8000a90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a94:	f04f 0901 	mov.w	r9, #1
 8000a98:	4623      	mov	r3, r4
 8000a9a:	469a      	mov	sl, r3
 8000a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000aa0:	b10a      	cbz	r2, 8000aa6 <_vfiprintf_r+0xa2>
 8000aa2:	2a25      	cmp	r2, #37	; 0x25
 8000aa4:	d1f9      	bne.n	8000a9a <_vfiprintf_r+0x96>
 8000aa6:	ebba 0b04 	subs.w	fp, sl, r4
 8000aaa:	d00b      	beq.n	8000ac4 <_vfiprintf_r+0xc0>
 8000aac:	465b      	mov	r3, fp
 8000aae:	4622      	mov	r2, r4
 8000ab0:	4629      	mov	r1, r5
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	f7ff ff93 	bl	80009de <__sfputs_r>
 8000ab8:	3001      	adds	r0, #1
 8000aba:	f000 80aa 	beq.w	8000c12 <_vfiprintf_r+0x20e>
 8000abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ac0:	445a      	add	r2, fp
 8000ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8000ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f000 80a2 	beq.w	8000c12 <_vfiprintf_r+0x20e>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ad8:	f10a 0a01 	add.w	sl, sl, #1
 8000adc:	9304      	str	r3, [sp, #16]
 8000ade:	9307      	str	r3, [sp, #28]
 8000ae0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ae4:	931a      	str	r3, [sp, #104]	; 0x68
 8000ae6:	4654      	mov	r4, sl
 8000ae8:	2205      	movs	r2, #5
 8000aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aee:	4858      	ldr	r0, [pc, #352]	; (8000c50 <_vfiprintf_r+0x24c>)
 8000af0:	f7ff fb76 	bl	80001e0 <memchr>
 8000af4:	9a04      	ldr	r2, [sp, #16]
 8000af6:	b9d8      	cbnz	r0, 8000b30 <_vfiprintf_r+0x12c>
 8000af8:	06d1      	lsls	r1, r2, #27
 8000afa:	bf44      	itt	mi
 8000afc:	2320      	movmi	r3, #32
 8000afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b02:	0713      	lsls	r3, r2, #28
 8000b04:	bf44      	itt	mi
 8000b06:	232b      	movmi	r3, #43	; 0x2b
 8000b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b10:	2b2a      	cmp	r3, #42	; 0x2a
 8000b12:	d015      	beq.n	8000b40 <_vfiprintf_r+0x13c>
 8000b14:	9a07      	ldr	r2, [sp, #28]
 8000b16:	4654      	mov	r4, sl
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f04f 0c0a 	mov.w	ip, #10
 8000b1e:	4621      	mov	r1, r4
 8000b20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b24:	3b30      	subs	r3, #48	; 0x30
 8000b26:	2b09      	cmp	r3, #9
 8000b28:	d94e      	bls.n	8000bc8 <_vfiprintf_r+0x1c4>
 8000b2a:	b1b0      	cbz	r0, 8000b5a <_vfiprintf_r+0x156>
 8000b2c:	9207      	str	r2, [sp, #28]
 8000b2e:	e014      	b.n	8000b5a <_vfiprintf_r+0x156>
 8000b30:	eba0 0308 	sub.w	r3, r0, r8
 8000b34:	fa09 f303 	lsl.w	r3, r9, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	9304      	str	r3, [sp, #16]
 8000b3c:	46a2      	mov	sl, r4
 8000b3e:	e7d2      	b.n	8000ae6 <_vfiprintf_r+0xe2>
 8000b40:	9b03      	ldr	r3, [sp, #12]
 8000b42:	1d19      	adds	r1, r3, #4
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	9103      	str	r1, [sp, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bfbb      	ittet	lt
 8000b4c:	425b      	neglt	r3, r3
 8000b4e:	f042 0202 	orrlt.w	r2, r2, #2
 8000b52:	9307      	strge	r3, [sp, #28]
 8000b54:	9307      	strlt	r3, [sp, #28]
 8000b56:	bfb8      	it	lt
 8000b58:	9204      	strlt	r2, [sp, #16]
 8000b5a:	7823      	ldrb	r3, [r4, #0]
 8000b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8000b5e:	d10c      	bne.n	8000b7a <_vfiprintf_r+0x176>
 8000b60:	7863      	ldrb	r3, [r4, #1]
 8000b62:	2b2a      	cmp	r3, #42	; 0x2a
 8000b64:	d135      	bne.n	8000bd2 <_vfiprintf_r+0x1ce>
 8000b66:	9b03      	ldr	r3, [sp, #12]
 8000b68:	1d1a      	adds	r2, r3, #4
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	9203      	str	r2, [sp, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bfb8      	it	lt
 8000b72:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b76:	3402      	adds	r4, #2
 8000b78:	9305      	str	r3, [sp, #20]
 8000b7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000c60 <_vfiprintf_r+0x25c>
 8000b7e:	7821      	ldrb	r1, [r4, #0]
 8000b80:	2203      	movs	r2, #3
 8000b82:	4650      	mov	r0, sl
 8000b84:	f7ff fb2c 	bl	80001e0 <memchr>
 8000b88:	b140      	cbz	r0, 8000b9c <_vfiprintf_r+0x198>
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	eba0 000a 	sub.w	r0, r0, sl
 8000b90:	fa03 f000 	lsl.w	r0, r3, r0
 8000b94:	9b04      	ldr	r3, [sp, #16]
 8000b96:	4303      	orrs	r3, r0
 8000b98:	3401      	adds	r4, #1
 8000b9a:	9304      	str	r3, [sp, #16]
 8000b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ba0:	482c      	ldr	r0, [pc, #176]	; (8000c54 <_vfiprintf_r+0x250>)
 8000ba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ba6:	2206      	movs	r2, #6
 8000ba8:	f7ff fb1a 	bl	80001e0 <memchr>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d03f      	beq.n	8000c30 <_vfiprintf_r+0x22c>
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <_vfiprintf_r+0x254>)
 8000bb2:	bb1b      	cbnz	r3, 8000bfc <_vfiprintf_r+0x1f8>
 8000bb4:	9b03      	ldr	r3, [sp, #12]
 8000bb6:	3307      	adds	r3, #7
 8000bb8:	f023 0307 	bic.w	r3, r3, #7
 8000bbc:	3308      	adds	r3, #8
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bc2:	443b      	add	r3, r7
 8000bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8000bc6:	e767      	b.n	8000a98 <_vfiprintf_r+0x94>
 8000bc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bcc:	460c      	mov	r4, r1
 8000bce:	2001      	movs	r0, #1
 8000bd0:	e7a5      	b.n	8000b1e <_vfiprintf_r+0x11a>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	3401      	adds	r4, #1
 8000bd6:	9305      	str	r3, [sp, #20]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 0c0a 	mov.w	ip, #10
 8000bde:	4620      	mov	r0, r4
 8000be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000be4:	3a30      	subs	r2, #48	; 0x30
 8000be6:	2a09      	cmp	r2, #9
 8000be8:	d903      	bls.n	8000bf2 <_vfiprintf_r+0x1ee>
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0c5      	beq.n	8000b7a <_vfiprintf_r+0x176>
 8000bee:	9105      	str	r1, [sp, #20]
 8000bf0:	e7c3      	b.n	8000b7a <_vfiprintf_r+0x176>
 8000bf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e7f0      	b.n	8000bde <_vfiprintf_r+0x1da>
 8000bfc:	ab03      	add	r3, sp, #12
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	462a      	mov	r2, r5
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <_vfiprintf_r+0x258>)
 8000c04:	a904      	add	r1, sp, #16
 8000c06:	4630      	mov	r0, r6
 8000c08:	f3af 8000 	nop.w
 8000c0c:	4607      	mov	r7, r0
 8000c0e:	1c78      	adds	r0, r7, #1
 8000c10:	d1d6      	bne.n	8000bc0 <_vfiprintf_r+0x1bc>
 8000c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c14:	07d9      	lsls	r1, r3, #31
 8000c16:	d405      	bmi.n	8000c24 <_vfiprintf_r+0x220>
 8000c18:	89ab      	ldrh	r3, [r5, #12]
 8000c1a:	059a      	lsls	r2, r3, #22
 8000c1c:	d402      	bmi.n	8000c24 <_vfiprintf_r+0x220>
 8000c1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c20:	f7ff fe31 	bl	8000886 <__retarget_lock_release_recursive>
 8000c24:	89ab      	ldrh	r3, [r5, #12]
 8000c26:	065b      	lsls	r3, r3, #25
 8000c28:	f53f af12 	bmi.w	8000a50 <_vfiprintf_r+0x4c>
 8000c2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c2e:	e711      	b.n	8000a54 <_vfiprintf_r+0x50>
 8000c30:	ab03      	add	r3, sp, #12
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	462a      	mov	r2, r5
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <_vfiprintf_r+0x258>)
 8000c38:	a904      	add	r1, sp, #16
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	f000 f880 	bl	8000d40 <_printf_i>
 8000c40:	e7e4      	b.n	8000c0c <_vfiprintf_r+0x208>
 8000c42:	bf00      	nop
 8000c44:	080015d8 	.word	0x080015d8
 8000c48:	080015f8 	.word	0x080015f8
 8000c4c:	080015b8 	.word	0x080015b8
 8000c50:	08001618 	.word	0x08001618
 8000c54:	08001622 	.word	0x08001622
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	080009df 	.word	0x080009df
 8000c60:	0800161e 	.word	0x0800161e

08000c64 <_printf_common>:
 8000c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c68:	4616      	mov	r6, r2
 8000c6a:	4699      	mov	r9, r3
 8000c6c:	688a      	ldr	r2, [r1, #8]
 8000c6e:	690b      	ldr	r3, [r1, #16]
 8000c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c74:	4293      	cmp	r3, r2
 8000c76:	bfb8      	it	lt
 8000c78:	4613      	movlt	r3, r2
 8000c7a:	6033      	str	r3, [r6, #0]
 8000c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c80:	4607      	mov	r7, r0
 8000c82:	460c      	mov	r4, r1
 8000c84:	b10a      	cbz	r2, 8000c8a <_printf_common+0x26>
 8000c86:	3301      	adds	r3, #1
 8000c88:	6033      	str	r3, [r6, #0]
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	0699      	lsls	r1, r3, #26
 8000c8e:	bf42      	ittt	mi
 8000c90:	6833      	ldrmi	r3, [r6, #0]
 8000c92:	3302      	addmi	r3, #2
 8000c94:	6033      	strmi	r3, [r6, #0]
 8000c96:	6825      	ldr	r5, [r4, #0]
 8000c98:	f015 0506 	ands.w	r5, r5, #6
 8000c9c:	d106      	bne.n	8000cac <_printf_common+0x48>
 8000c9e:	f104 0a19 	add.w	sl, r4, #25
 8000ca2:	68e3      	ldr	r3, [r4, #12]
 8000ca4:	6832      	ldr	r2, [r6, #0]
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	dc26      	bgt.n	8000cfa <_printf_common+0x96>
 8000cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000cb0:	1e13      	subs	r3, r2, #0
 8000cb2:	6822      	ldr	r2, [r4, #0]
 8000cb4:	bf18      	it	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	0692      	lsls	r2, r2, #26
 8000cba:	d42b      	bmi.n	8000d14 <_printf_common+0xb0>
 8000cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000cc0:	4649      	mov	r1, r9
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	47c0      	blx	r8
 8000cc6:	3001      	adds	r0, #1
 8000cc8:	d01e      	beq.n	8000d08 <_printf_common+0xa4>
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	68e5      	ldr	r5, [r4, #12]
 8000cce:	6832      	ldr	r2, [r6, #0]
 8000cd0:	f003 0306 	and.w	r3, r3, #6
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	bf08      	it	eq
 8000cd8:	1aad      	subeq	r5, r5, r2
 8000cda:	68a3      	ldr	r3, [r4, #8]
 8000cdc:	6922      	ldr	r2, [r4, #16]
 8000cde:	bf0c      	ite	eq
 8000ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ce4:	2500      	movne	r5, #0
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	bfc4      	itt	gt
 8000cea:	1a9b      	subgt	r3, r3, r2
 8000cec:	18ed      	addgt	r5, r5, r3
 8000cee:	2600      	movs	r6, #0
 8000cf0:	341a      	adds	r4, #26
 8000cf2:	42b5      	cmp	r5, r6
 8000cf4:	d11a      	bne.n	8000d2c <_printf_common+0xc8>
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	e008      	b.n	8000d0c <_printf_common+0xa8>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	4652      	mov	r2, sl
 8000cfe:	4649      	mov	r1, r9
 8000d00:	4638      	mov	r0, r7
 8000d02:	47c0      	blx	r8
 8000d04:	3001      	adds	r0, #1
 8000d06:	d103      	bne.n	8000d10 <_printf_common+0xac>
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d10:	3501      	adds	r5, #1
 8000d12:	e7c6      	b.n	8000ca2 <_printf_common+0x3e>
 8000d14:	18e1      	adds	r1, r4, r3
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	2030      	movs	r0, #48	; 0x30
 8000d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d1e:	4422      	add	r2, r4
 8000d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d28:	3302      	adds	r3, #2
 8000d2a:	e7c7      	b.n	8000cbc <_printf_common+0x58>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4649      	mov	r1, r9
 8000d32:	4638      	mov	r0, r7
 8000d34:	47c0      	blx	r8
 8000d36:	3001      	adds	r0, #1
 8000d38:	d0e6      	beq.n	8000d08 <_printf_common+0xa4>
 8000d3a:	3601      	adds	r6, #1
 8000d3c:	e7d9      	b.n	8000cf2 <_printf_common+0x8e>
	...

08000d40 <_printf_i>:
 8000d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d44:	7e0f      	ldrb	r7, [r1, #24]
 8000d46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d48:	2f78      	cmp	r7, #120	; 0x78
 8000d4a:	4691      	mov	r9, r2
 8000d4c:	4680      	mov	r8, r0
 8000d4e:	460c      	mov	r4, r1
 8000d50:	469a      	mov	sl, r3
 8000d52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d56:	d807      	bhi.n	8000d68 <_printf_i+0x28>
 8000d58:	2f62      	cmp	r7, #98	; 0x62
 8000d5a:	d80a      	bhi.n	8000d72 <_printf_i+0x32>
 8000d5c:	2f00      	cmp	r7, #0
 8000d5e:	f000 80d8 	beq.w	8000f12 <_printf_i+0x1d2>
 8000d62:	2f58      	cmp	r7, #88	; 0x58
 8000d64:	f000 80a3 	beq.w	8000eae <_printf_i+0x16e>
 8000d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d70:	e03a      	b.n	8000de8 <_printf_i+0xa8>
 8000d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d76:	2b15      	cmp	r3, #21
 8000d78:	d8f6      	bhi.n	8000d68 <_printf_i+0x28>
 8000d7a:	a101      	add	r1, pc, #4	; (adr r1, 8000d80 <_printf_i+0x40>)
 8000d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d80:	08000dd9 	.word	0x08000dd9
 8000d84:	08000ded 	.word	0x08000ded
 8000d88:	08000d69 	.word	0x08000d69
 8000d8c:	08000d69 	.word	0x08000d69
 8000d90:	08000d69 	.word	0x08000d69
 8000d94:	08000d69 	.word	0x08000d69
 8000d98:	08000ded 	.word	0x08000ded
 8000d9c:	08000d69 	.word	0x08000d69
 8000da0:	08000d69 	.word	0x08000d69
 8000da4:	08000d69 	.word	0x08000d69
 8000da8:	08000d69 	.word	0x08000d69
 8000dac:	08000ef9 	.word	0x08000ef9
 8000db0:	08000e1d 	.word	0x08000e1d
 8000db4:	08000edb 	.word	0x08000edb
 8000db8:	08000d69 	.word	0x08000d69
 8000dbc:	08000d69 	.word	0x08000d69
 8000dc0:	08000f1b 	.word	0x08000f1b
 8000dc4:	08000d69 	.word	0x08000d69
 8000dc8:	08000e1d 	.word	0x08000e1d
 8000dcc:	08000d69 	.word	0x08000d69
 8000dd0:	08000d69 	.word	0x08000d69
 8000dd4:	08000ee3 	.word	0x08000ee3
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	1d1a      	adds	r2, r3, #4
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	602a      	str	r2, [r5, #0]
 8000de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000de8:	2301      	movs	r3, #1
 8000dea:	e0a3      	b.n	8000f34 <_printf_i+0x1f4>
 8000dec:	6820      	ldr	r0, [r4, #0]
 8000dee:	6829      	ldr	r1, [r5, #0]
 8000df0:	0606      	lsls	r6, r0, #24
 8000df2:	f101 0304 	add.w	r3, r1, #4
 8000df6:	d50a      	bpl.n	8000e0e <_printf_i+0xce>
 8000df8:	680e      	ldr	r6, [r1, #0]
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	da03      	bge.n	8000e08 <_printf_i+0xc8>
 8000e00:	232d      	movs	r3, #45	; 0x2d
 8000e02:	4276      	negs	r6, r6
 8000e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e08:	485e      	ldr	r0, [pc, #376]	; (8000f84 <_printf_i+0x244>)
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	e019      	b.n	8000e42 <_printf_i+0x102>
 8000e0e:	680e      	ldr	r6, [r1, #0]
 8000e10:	602b      	str	r3, [r5, #0]
 8000e12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e16:	bf18      	it	ne
 8000e18:	b236      	sxthne	r6, r6
 8000e1a:	e7ef      	b.n	8000dfc <_printf_i+0xbc>
 8000e1c:	682b      	ldr	r3, [r5, #0]
 8000e1e:	6820      	ldr	r0, [r4, #0]
 8000e20:	1d19      	adds	r1, r3, #4
 8000e22:	6029      	str	r1, [r5, #0]
 8000e24:	0601      	lsls	r1, r0, #24
 8000e26:	d501      	bpl.n	8000e2c <_printf_i+0xec>
 8000e28:	681e      	ldr	r6, [r3, #0]
 8000e2a:	e002      	b.n	8000e32 <_printf_i+0xf2>
 8000e2c:	0646      	lsls	r6, r0, #25
 8000e2e:	d5fb      	bpl.n	8000e28 <_printf_i+0xe8>
 8000e30:	881e      	ldrh	r6, [r3, #0]
 8000e32:	4854      	ldr	r0, [pc, #336]	; (8000f84 <_printf_i+0x244>)
 8000e34:	2f6f      	cmp	r7, #111	; 0x6f
 8000e36:	bf0c      	ite	eq
 8000e38:	2308      	moveq	r3, #8
 8000e3a:	230a      	movne	r3, #10
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e42:	6865      	ldr	r5, [r4, #4]
 8000e44:	60a5      	str	r5, [r4, #8]
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	bfa2      	ittt	ge
 8000e4a:	6821      	ldrge	r1, [r4, #0]
 8000e4c:	f021 0104 	bicge.w	r1, r1, #4
 8000e50:	6021      	strge	r1, [r4, #0]
 8000e52:	b90e      	cbnz	r6, 8000e58 <_printf_i+0x118>
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d04d      	beq.n	8000ef4 <_printf_i+0x1b4>
 8000e58:	4615      	mov	r5, r2
 8000e5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e5e:	fb03 6711 	mls	r7, r3, r1, r6
 8000e62:	5dc7      	ldrb	r7, [r0, r7]
 8000e64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e68:	4637      	mov	r7, r6
 8000e6a:	42bb      	cmp	r3, r7
 8000e6c:	460e      	mov	r6, r1
 8000e6e:	d9f4      	bls.n	8000e5a <_printf_i+0x11a>
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d10b      	bne.n	8000e8c <_printf_i+0x14c>
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	07de      	lsls	r6, r3, #31
 8000e78:	d508      	bpl.n	8000e8c <_printf_i+0x14c>
 8000e7a:	6923      	ldr	r3, [r4, #16]
 8000e7c:	6861      	ldr	r1, [r4, #4]
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	bfde      	ittt	le
 8000e82:	2330      	movle	r3, #48	; 0x30
 8000e84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000e8c:	1b52      	subs	r2, r2, r5
 8000e8e:	6122      	str	r2, [r4, #16]
 8000e90:	f8cd a000 	str.w	sl, [sp]
 8000e94:	464b      	mov	r3, r9
 8000e96:	aa03      	add	r2, sp, #12
 8000e98:	4621      	mov	r1, r4
 8000e9a:	4640      	mov	r0, r8
 8000e9c:	f7ff fee2 	bl	8000c64 <_printf_common>
 8000ea0:	3001      	adds	r0, #1
 8000ea2:	d14c      	bne.n	8000f3e <_printf_i+0x1fe>
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	b004      	add	sp, #16
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	4835      	ldr	r0, [pc, #212]	; (8000f84 <_printf_i+0x244>)
 8000eb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000eb4:	6829      	ldr	r1, [r5, #0]
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8000ebc:	6029      	str	r1, [r5, #0]
 8000ebe:	061d      	lsls	r5, r3, #24
 8000ec0:	d514      	bpl.n	8000eec <_printf_i+0x1ac>
 8000ec2:	07df      	lsls	r7, r3, #31
 8000ec4:	bf44      	itt	mi
 8000ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8000eca:	6023      	strmi	r3, [r4, #0]
 8000ecc:	b91e      	cbnz	r6, 8000ed6 <_printf_i+0x196>
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	f023 0320 	bic.w	r3, r3, #32
 8000ed4:	6023      	str	r3, [r4, #0]
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	e7b0      	b.n	8000e3c <_printf_i+0xfc>
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	f043 0320 	orr.w	r3, r3, #32
 8000ee0:	6023      	str	r3, [r4, #0]
 8000ee2:	2378      	movs	r3, #120	; 0x78
 8000ee4:	4828      	ldr	r0, [pc, #160]	; (8000f88 <_printf_i+0x248>)
 8000ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000eea:	e7e3      	b.n	8000eb4 <_printf_i+0x174>
 8000eec:	0659      	lsls	r1, r3, #25
 8000eee:	bf48      	it	mi
 8000ef0:	b2b6      	uxthmi	r6, r6
 8000ef2:	e7e6      	b.n	8000ec2 <_printf_i+0x182>
 8000ef4:	4615      	mov	r5, r2
 8000ef6:	e7bb      	b.n	8000e70 <_printf_i+0x130>
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	6826      	ldr	r6, [r4, #0]
 8000efc:	6961      	ldr	r1, [r4, #20]
 8000efe:	1d18      	adds	r0, r3, #4
 8000f00:	6028      	str	r0, [r5, #0]
 8000f02:	0635      	lsls	r5, r6, #24
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	d501      	bpl.n	8000f0c <_printf_i+0x1cc>
 8000f08:	6019      	str	r1, [r3, #0]
 8000f0a:	e002      	b.n	8000f12 <_printf_i+0x1d2>
 8000f0c:	0670      	lsls	r0, r6, #25
 8000f0e:	d5fb      	bpl.n	8000f08 <_printf_i+0x1c8>
 8000f10:	8019      	strh	r1, [r3, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	6123      	str	r3, [r4, #16]
 8000f16:	4615      	mov	r5, r2
 8000f18:	e7ba      	b.n	8000e90 <_printf_i+0x150>
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	1d1a      	adds	r2, r3, #4
 8000f1e:	602a      	str	r2, [r5, #0]
 8000f20:	681d      	ldr	r5, [r3, #0]
 8000f22:	6862      	ldr	r2, [r4, #4]
 8000f24:	2100      	movs	r1, #0
 8000f26:	4628      	mov	r0, r5
 8000f28:	f7ff f95a 	bl	80001e0 <memchr>
 8000f2c:	b108      	cbz	r0, 8000f32 <_printf_i+0x1f2>
 8000f2e:	1b40      	subs	r0, r0, r5
 8000f30:	6060      	str	r0, [r4, #4]
 8000f32:	6863      	ldr	r3, [r4, #4]
 8000f34:	6123      	str	r3, [r4, #16]
 8000f36:	2300      	movs	r3, #0
 8000f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f3c:	e7a8      	b.n	8000e90 <_printf_i+0x150>
 8000f3e:	6923      	ldr	r3, [r4, #16]
 8000f40:	462a      	mov	r2, r5
 8000f42:	4649      	mov	r1, r9
 8000f44:	4640      	mov	r0, r8
 8000f46:	47d0      	blx	sl
 8000f48:	3001      	adds	r0, #1
 8000f4a:	d0ab      	beq.n	8000ea4 <_printf_i+0x164>
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	079b      	lsls	r3, r3, #30
 8000f50:	d413      	bmi.n	8000f7a <_printf_i+0x23a>
 8000f52:	68e0      	ldr	r0, [r4, #12]
 8000f54:	9b03      	ldr	r3, [sp, #12]
 8000f56:	4298      	cmp	r0, r3
 8000f58:	bfb8      	it	lt
 8000f5a:	4618      	movlt	r0, r3
 8000f5c:	e7a4      	b.n	8000ea8 <_printf_i+0x168>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4632      	mov	r2, r6
 8000f62:	4649      	mov	r1, r9
 8000f64:	4640      	mov	r0, r8
 8000f66:	47d0      	blx	sl
 8000f68:	3001      	adds	r0, #1
 8000f6a:	d09b      	beq.n	8000ea4 <_printf_i+0x164>
 8000f6c:	3501      	adds	r5, #1
 8000f6e:	68e3      	ldr	r3, [r4, #12]
 8000f70:	9903      	ldr	r1, [sp, #12]
 8000f72:	1a5b      	subs	r3, r3, r1
 8000f74:	42ab      	cmp	r3, r5
 8000f76:	dcf2      	bgt.n	8000f5e <_printf_i+0x21e>
 8000f78:	e7eb      	b.n	8000f52 <_printf_i+0x212>
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	f104 0619 	add.w	r6, r4, #25
 8000f80:	e7f5      	b.n	8000f6e <_printf_i+0x22e>
 8000f82:	bf00      	nop
 8000f84:	08001629 	.word	0x08001629
 8000f88:	0800163a 	.word	0x0800163a

08000f8c <_sbrk_r>:
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	4d06      	ldr	r5, [pc, #24]	; (8000fa8 <_sbrk_r+0x1c>)
 8000f90:	2300      	movs	r3, #0
 8000f92:	4604      	mov	r4, r0
 8000f94:	4608      	mov	r0, r1
 8000f96:	602b      	str	r3, [r5, #0]
 8000f98:	f7ff fa18 	bl	80003cc <_sbrk>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk_r+0x1a>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b103      	cbz	r3, 8000fa6 <_sbrk_r+0x1a>
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	20000090 	.word	0x20000090

08000fac <__sread>:
 8000fac:	b510      	push	{r4, lr}
 8000fae:	460c      	mov	r4, r1
 8000fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fb4:	f000 fab2 	bl	800151c <_read_r>
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	bfab      	itete	ge
 8000fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8000fc0:	181b      	addge	r3, r3, r0
 8000fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fc6:	bfac      	ite	ge
 8000fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fca:	81a3      	strhlt	r3, [r4, #12]
 8000fcc:	bd10      	pop	{r4, pc}

08000fce <__swrite>:
 8000fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd2:	461f      	mov	r7, r3
 8000fd4:	898b      	ldrh	r3, [r1, #12]
 8000fd6:	05db      	lsls	r3, r3, #23
 8000fd8:	4605      	mov	r5, r0
 8000fda:	460c      	mov	r4, r1
 8000fdc:	4616      	mov	r6, r2
 8000fde:	d505      	bpl.n	8000fec <__swrite+0x1e>
 8000fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f000 f9c8 	bl	800137c <_lseek_r>
 8000fec:	89a3      	ldrh	r3, [r4, #12]
 8000fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ff6:	81a3      	strh	r3, [r4, #12]
 8000ff8:	4632      	mov	r2, r6
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001002:	f000 b869 	b.w	80010d8 <_write_r>

08001006 <__sseek>:
 8001006:	b510      	push	{r4, lr}
 8001008:	460c      	mov	r4, r1
 800100a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800100e:	f000 f9b5 	bl	800137c <_lseek_r>
 8001012:	1c43      	adds	r3, r0, #1
 8001014:	89a3      	ldrh	r3, [r4, #12]
 8001016:	bf15      	itete	ne
 8001018:	6560      	strne	r0, [r4, #84]	; 0x54
 800101a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800101e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001022:	81a3      	strheq	r3, [r4, #12]
 8001024:	bf18      	it	ne
 8001026:	81a3      	strhne	r3, [r4, #12]
 8001028:	bd10      	pop	{r4, pc}

0800102a <__sclose>:
 800102a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800102e:	f000 b8d3 	b.w	80011d8 <_close_r>
	...

08001034 <__swbuf_r>:
 8001034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001036:	460e      	mov	r6, r1
 8001038:	4614      	mov	r4, r2
 800103a:	4605      	mov	r5, r0
 800103c:	b118      	cbz	r0, 8001046 <__swbuf_r+0x12>
 800103e:	6983      	ldr	r3, [r0, #24]
 8001040:	b90b      	cbnz	r3, 8001046 <__swbuf_r+0x12>
 8001042:	f7ff fb81 	bl	8000748 <__sinit>
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <__swbuf_r+0x98>)
 8001048:	429c      	cmp	r4, r3
 800104a:	d12b      	bne.n	80010a4 <__swbuf_r+0x70>
 800104c:	686c      	ldr	r4, [r5, #4]
 800104e:	69a3      	ldr	r3, [r4, #24]
 8001050:	60a3      	str	r3, [r4, #8]
 8001052:	89a3      	ldrh	r3, [r4, #12]
 8001054:	071a      	lsls	r2, r3, #28
 8001056:	d52f      	bpl.n	80010b8 <__swbuf_r+0x84>
 8001058:	6923      	ldr	r3, [r4, #16]
 800105a:	b36b      	cbz	r3, 80010b8 <__swbuf_r+0x84>
 800105c:	6923      	ldr	r3, [r4, #16]
 800105e:	6820      	ldr	r0, [r4, #0]
 8001060:	1ac0      	subs	r0, r0, r3
 8001062:	6963      	ldr	r3, [r4, #20]
 8001064:	b2f6      	uxtb	r6, r6
 8001066:	4283      	cmp	r3, r0
 8001068:	4637      	mov	r7, r6
 800106a:	dc04      	bgt.n	8001076 <__swbuf_r+0x42>
 800106c:	4621      	mov	r1, r4
 800106e:	4628      	mov	r0, r5
 8001070:	f000 f948 	bl	8001304 <_fflush_r>
 8001074:	bb30      	cbnz	r0, 80010c4 <__swbuf_r+0x90>
 8001076:	68a3      	ldr	r3, [r4, #8]
 8001078:	3b01      	subs	r3, #1
 800107a:	60a3      	str	r3, [r4, #8]
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	6022      	str	r2, [r4, #0]
 8001082:	701e      	strb	r6, [r3, #0]
 8001084:	6963      	ldr	r3, [r4, #20]
 8001086:	3001      	adds	r0, #1
 8001088:	4283      	cmp	r3, r0
 800108a:	d004      	beq.n	8001096 <__swbuf_r+0x62>
 800108c:	89a3      	ldrh	r3, [r4, #12]
 800108e:	07db      	lsls	r3, r3, #31
 8001090:	d506      	bpl.n	80010a0 <__swbuf_r+0x6c>
 8001092:	2e0a      	cmp	r6, #10
 8001094:	d104      	bne.n	80010a0 <__swbuf_r+0x6c>
 8001096:	4621      	mov	r1, r4
 8001098:	4628      	mov	r0, r5
 800109a:	f000 f933 	bl	8001304 <_fflush_r>
 800109e:	b988      	cbnz	r0, 80010c4 <__swbuf_r+0x90>
 80010a0:	4638      	mov	r0, r7
 80010a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <__swbuf_r+0x9c>)
 80010a6:	429c      	cmp	r4, r3
 80010a8:	d101      	bne.n	80010ae <__swbuf_r+0x7a>
 80010aa:	68ac      	ldr	r4, [r5, #8]
 80010ac:	e7cf      	b.n	800104e <__swbuf_r+0x1a>
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <__swbuf_r+0xa0>)
 80010b0:	429c      	cmp	r4, r3
 80010b2:	bf08      	it	eq
 80010b4:	68ec      	ldreq	r4, [r5, #12]
 80010b6:	e7ca      	b.n	800104e <__swbuf_r+0x1a>
 80010b8:	4621      	mov	r1, r4
 80010ba:	4628      	mov	r0, r5
 80010bc:	f000 f81e 	bl	80010fc <__swsetup_r>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d0cb      	beq.n	800105c <__swbuf_r+0x28>
 80010c4:	f04f 37ff 	mov.w	r7, #4294967295
 80010c8:	e7ea      	b.n	80010a0 <__swbuf_r+0x6c>
 80010ca:	bf00      	nop
 80010cc:	080015d8 	.word	0x080015d8
 80010d0:	080015f8 	.word	0x080015f8
 80010d4:	080015b8 	.word	0x080015b8

080010d8 <_write_r>:
 80010d8:	b538      	push	{r3, r4, r5, lr}
 80010da:	4d07      	ldr	r5, [pc, #28]	; (80010f8 <_write_r+0x20>)
 80010dc:	4604      	mov	r4, r0
 80010de:	4608      	mov	r0, r1
 80010e0:	4611      	mov	r1, r2
 80010e2:	2200      	movs	r2, #0
 80010e4:	602a      	str	r2, [r5, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	f7ff f91f 	bl	800032a <_write>
 80010ec:	1c43      	adds	r3, r0, #1
 80010ee:	d102      	bne.n	80010f6 <_write_r+0x1e>
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	b103      	cbz	r3, 80010f6 <_write_r+0x1e>
 80010f4:	6023      	str	r3, [r4, #0]
 80010f6:	bd38      	pop	{r3, r4, r5, pc}
 80010f8:	20000090 	.word	0x20000090

080010fc <__swsetup_r>:
 80010fc:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <__swsetup_r+0xcc>)
 80010fe:	b570      	push	{r4, r5, r6, lr}
 8001100:	681d      	ldr	r5, [r3, #0]
 8001102:	4606      	mov	r6, r0
 8001104:	460c      	mov	r4, r1
 8001106:	b125      	cbz	r5, 8001112 <__swsetup_r+0x16>
 8001108:	69ab      	ldr	r3, [r5, #24]
 800110a:	b913      	cbnz	r3, 8001112 <__swsetup_r+0x16>
 800110c:	4628      	mov	r0, r5
 800110e:	f7ff fb1b 	bl	8000748 <__sinit>
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <__swsetup_r+0xd0>)
 8001114:	429c      	cmp	r4, r3
 8001116:	d10f      	bne.n	8001138 <__swsetup_r+0x3c>
 8001118:	686c      	ldr	r4, [r5, #4]
 800111a:	89a3      	ldrh	r3, [r4, #12]
 800111c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001120:	0719      	lsls	r1, r3, #28
 8001122:	d42c      	bmi.n	800117e <__swsetup_r+0x82>
 8001124:	06dd      	lsls	r5, r3, #27
 8001126:	d411      	bmi.n	800114c <__swsetup_r+0x50>
 8001128:	2309      	movs	r3, #9
 800112a:	6033      	str	r3, [r6, #0]
 800112c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001130:	81a3      	strh	r3, [r4, #12]
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	e03e      	b.n	80011b6 <__swsetup_r+0xba>
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <__swsetup_r+0xd4>)
 800113a:	429c      	cmp	r4, r3
 800113c:	d101      	bne.n	8001142 <__swsetup_r+0x46>
 800113e:	68ac      	ldr	r4, [r5, #8]
 8001140:	e7eb      	b.n	800111a <__swsetup_r+0x1e>
 8001142:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <__swsetup_r+0xd8>)
 8001144:	429c      	cmp	r4, r3
 8001146:	bf08      	it	eq
 8001148:	68ec      	ldreq	r4, [r5, #12]
 800114a:	e7e6      	b.n	800111a <__swsetup_r+0x1e>
 800114c:	0758      	lsls	r0, r3, #29
 800114e:	d512      	bpl.n	8001176 <__swsetup_r+0x7a>
 8001150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001152:	b141      	cbz	r1, 8001166 <__swsetup_r+0x6a>
 8001154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001158:	4299      	cmp	r1, r3
 800115a:	d002      	beq.n	8001162 <__swsetup_r+0x66>
 800115c:	4630      	mov	r0, r6
 800115e:	f000 f991 	bl	8001484 <_free_r>
 8001162:	2300      	movs	r3, #0
 8001164:	6363      	str	r3, [r4, #52]	; 0x34
 8001166:	89a3      	ldrh	r3, [r4, #12]
 8001168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800116c:	81a3      	strh	r3, [r4, #12]
 800116e:	2300      	movs	r3, #0
 8001170:	6063      	str	r3, [r4, #4]
 8001172:	6923      	ldr	r3, [r4, #16]
 8001174:	6023      	str	r3, [r4, #0]
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	81a3      	strh	r3, [r4, #12]
 800117e:	6923      	ldr	r3, [r4, #16]
 8001180:	b94b      	cbnz	r3, 8001196 <__swsetup_r+0x9a>
 8001182:	89a3      	ldrh	r3, [r4, #12]
 8001184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118c:	d003      	beq.n	8001196 <__swsetup_r+0x9a>
 800118e:	4621      	mov	r1, r4
 8001190:	4630      	mov	r0, r6
 8001192:	f000 f92b 	bl	80013ec <__smakebuf_r>
 8001196:	89a0      	ldrh	r0, [r4, #12]
 8001198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800119c:	f010 0301 	ands.w	r3, r0, #1
 80011a0:	d00a      	beq.n	80011b8 <__swsetup_r+0xbc>
 80011a2:	2300      	movs	r3, #0
 80011a4:	60a3      	str	r3, [r4, #8]
 80011a6:	6963      	ldr	r3, [r4, #20]
 80011a8:	425b      	negs	r3, r3
 80011aa:	61a3      	str	r3, [r4, #24]
 80011ac:	6923      	ldr	r3, [r4, #16]
 80011ae:	b943      	cbnz	r3, 80011c2 <__swsetup_r+0xc6>
 80011b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80011b4:	d1ba      	bne.n	800112c <__swsetup_r+0x30>
 80011b6:	bd70      	pop	{r4, r5, r6, pc}
 80011b8:	0781      	lsls	r1, r0, #30
 80011ba:	bf58      	it	pl
 80011bc:	6963      	ldrpl	r3, [r4, #20]
 80011be:	60a3      	str	r3, [r4, #8]
 80011c0:	e7f4      	b.n	80011ac <__swsetup_r+0xb0>
 80011c2:	2000      	movs	r0, #0
 80011c4:	e7f7      	b.n	80011b6 <__swsetup_r+0xba>
 80011c6:	bf00      	nop
 80011c8:	20000000 	.word	0x20000000
 80011cc:	080015d8 	.word	0x080015d8
 80011d0:	080015f8 	.word	0x080015f8
 80011d4:	080015b8 	.word	0x080015b8

080011d8 <_close_r>:
 80011d8:	b538      	push	{r3, r4, r5, lr}
 80011da:	4d06      	ldr	r5, [pc, #24]	; (80011f4 <_close_r+0x1c>)
 80011dc:	2300      	movs	r3, #0
 80011de:	4604      	mov	r4, r0
 80011e0:	4608      	mov	r0, r1
 80011e2:	602b      	str	r3, [r5, #0]
 80011e4:	f7ff f8bd 	bl	8000362 <_close>
 80011e8:	1c43      	adds	r3, r0, #1
 80011ea:	d102      	bne.n	80011f2 <_close_r+0x1a>
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	b103      	cbz	r3, 80011f2 <_close_r+0x1a>
 80011f0:	6023      	str	r3, [r4, #0]
 80011f2:	bd38      	pop	{r3, r4, r5, pc}
 80011f4:	20000090 	.word	0x20000090

080011f8 <__sflush_r>:
 80011f8:	898a      	ldrh	r2, [r1, #12]
 80011fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011fe:	4605      	mov	r5, r0
 8001200:	0710      	lsls	r0, r2, #28
 8001202:	460c      	mov	r4, r1
 8001204:	d458      	bmi.n	80012b8 <__sflush_r+0xc0>
 8001206:	684b      	ldr	r3, [r1, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	dc05      	bgt.n	8001218 <__sflush_r+0x20>
 800120c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	dc02      	bgt.n	8001218 <__sflush_r+0x20>
 8001212:	2000      	movs	r0, #0
 8001214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800121a:	2e00      	cmp	r6, #0
 800121c:	d0f9      	beq.n	8001212 <__sflush_r+0x1a>
 800121e:	2300      	movs	r3, #0
 8001220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001224:	682f      	ldr	r7, [r5, #0]
 8001226:	602b      	str	r3, [r5, #0]
 8001228:	d032      	beq.n	8001290 <__sflush_r+0x98>
 800122a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800122c:	89a3      	ldrh	r3, [r4, #12]
 800122e:	075a      	lsls	r2, r3, #29
 8001230:	d505      	bpl.n	800123e <__sflush_r+0x46>
 8001232:	6863      	ldr	r3, [r4, #4]
 8001234:	1ac0      	subs	r0, r0, r3
 8001236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001238:	b10b      	cbz	r3, 800123e <__sflush_r+0x46>
 800123a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800123c:	1ac0      	subs	r0, r0, r3
 800123e:	2300      	movs	r3, #0
 8001240:	4602      	mov	r2, r0
 8001242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001244:	6a21      	ldr	r1, [r4, #32]
 8001246:	4628      	mov	r0, r5
 8001248:	47b0      	blx	r6
 800124a:	1c43      	adds	r3, r0, #1
 800124c:	89a3      	ldrh	r3, [r4, #12]
 800124e:	d106      	bne.n	800125e <__sflush_r+0x66>
 8001250:	6829      	ldr	r1, [r5, #0]
 8001252:	291d      	cmp	r1, #29
 8001254:	d82c      	bhi.n	80012b0 <__sflush_r+0xb8>
 8001256:	4a2a      	ldr	r2, [pc, #168]	; (8001300 <__sflush_r+0x108>)
 8001258:	40ca      	lsrs	r2, r1
 800125a:	07d6      	lsls	r6, r2, #31
 800125c:	d528      	bpl.n	80012b0 <__sflush_r+0xb8>
 800125e:	2200      	movs	r2, #0
 8001260:	6062      	str	r2, [r4, #4]
 8001262:	04d9      	lsls	r1, r3, #19
 8001264:	6922      	ldr	r2, [r4, #16]
 8001266:	6022      	str	r2, [r4, #0]
 8001268:	d504      	bpl.n	8001274 <__sflush_r+0x7c>
 800126a:	1c42      	adds	r2, r0, #1
 800126c:	d101      	bne.n	8001272 <__sflush_r+0x7a>
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	b903      	cbnz	r3, 8001274 <__sflush_r+0x7c>
 8001272:	6560      	str	r0, [r4, #84]	; 0x54
 8001274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001276:	602f      	str	r7, [r5, #0]
 8001278:	2900      	cmp	r1, #0
 800127a:	d0ca      	beq.n	8001212 <__sflush_r+0x1a>
 800127c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001280:	4299      	cmp	r1, r3
 8001282:	d002      	beq.n	800128a <__sflush_r+0x92>
 8001284:	4628      	mov	r0, r5
 8001286:	f000 f8fd 	bl	8001484 <_free_r>
 800128a:	2000      	movs	r0, #0
 800128c:	6360      	str	r0, [r4, #52]	; 0x34
 800128e:	e7c1      	b.n	8001214 <__sflush_r+0x1c>
 8001290:	6a21      	ldr	r1, [r4, #32]
 8001292:	2301      	movs	r3, #1
 8001294:	4628      	mov	r0, r5
 8001296:	47b0      	blx	r6
 8001298:	1c41      	adds	r1, r0, #1
 800129a:	d1c7      	bne.n	800122c <__sflush_r+0x34>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0c4      	beq.n	800122c <__sflush_r+0x34>
 80012a2:	2b1d      	cmp	r3, #29
 80012a4:	d001      	beq.n	80012aa <__sflush_r+0xb2>
 80012a6:	2b16      	cmp	r3, #22
 80012a8:	d101      	bne.n	80012ae <__sflush_r+0xb6>
 80012aa:	602f      	str	r7, [r5, #0]
 80012ac:	e7b1      	b.n	8001212 <__sflush_r+0x1a>
 80012ae:	89a3      	ldrh	r3, [r4, #12]
 80012b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b4:	81a3      	strh	r3, [r4, #12]
 80012b6:	e7ad      	b.n	8001214 <__sflush_r+0x1c>
 80012b8:	690f      	ldr	r7, [r1, #16]
 80012ba:	2f00      	cmp	r7, #0
 80012bc:	d0a9      	beq.n	8001212 <__sflush_r+0x1a>
 80012be:	0793      	lsls	r3, r2, #30
 80012c0:	680e      	ldr	r6, [r1, #0]
 80012c2:	bf08      	it	eq
 80012c4:	694b      	ldreq	r3, [r1, #20]
 80012c6:	600f      	str	r7, [r1, #0]
 80012c8:	bf18      	it	ne
 80012ca:	2300      	movne	r3, #0
 80012cc:	eba6 0807 	sub.w	r8, r6, r7
 80012d0:	608b      	str	r3, [r1, #8]
 80012d2:	f1b8 0f00 	cmp.w	r8, #0
 80012d6:	dd9c      	ble.n	8001212 <__sflush_r+0x1a>
 80012d8:	6a21      	ldr	r1, [r4, #32]
 80012da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80012dc:	4643      	mov	r3, r8
 80012de:	463a      	mov	r2, r7
 80012e0:	4628      	mov	r0, r5
 80012e2:	47b0      	blx	r6
 80012e4:	2800      	cmp	r0, #0
 80012e6:	dc06      	bgt.n	80012f6 <__sflush_r+0xfe>
 80012e8:	89a3      	ldrh	r3, [r4, #12]
 80012ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ee:	81a3      	strh	r3, [r4, #12]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	e78e      	b.n	8001214 <__sflush_r+0x1c>
 80012f6:	4407      	add	r7, r0
 80012f8:	eba8 0800 	sub.w	r8, r8, r0
 80012fc:	e7e9      	b.n	80012d2 <__sflush_r+0xda>
 80012fe:	bf00      	nop
 8001300:	20400001 	.word	0x20400001

08001304 <_fflush_r>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	690b      	ldr	r3, [r1, #16]
 8001308:	4605      	mov	r5, r0
 800130a:	460c      	mov	r4, r1
 800130c:	b913      	cbnz	r3, 8001314 <_fflush_r+0x10>
 800130e:	2500      	movs	r5, #0
 8001310:	4628      	mov	r0, r5
 8001312:	bd38      	pop	{r3, r4, r5, pc}
 8001314:	b118      	cbz	r0, 800131e <_fflush_r+0x1a>
 8001316:	6983      	ldr	r3, [r0, #24]
 8001318:	b90b      	cbnz	r3, 800131e <_fflush_r+0x1a>
 800131a:	f7ff fa15 	bl	8000748 <__sinit>
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <_fflush_r+0x6c>)
 8001320:	429c      	cmp	r4, r3
 8001322:	d11b      	bne.n	800135c <_fflush_r+0x58>
 8001324:	686c      	ldr	r4, [r5, #4]
 8001326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0ef      	beq.n	800130e <_fflush_r+0xa>
 800132e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001330:	07d0      	lsls	r0, r2, #31
 8001332:	d404      	bmi.n	800133e <_fflush_r+0x3a>
 8001334:	0599      	lsls	r1, r3, #22
 8001336:	d402      	bmi.n	800133e <_fflush_r+0x3a>
 8001338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800133a:	f7ff faa3 	bl	8000884 <__retarget_lock_acquire_recursive>
 800133e:	4628      	mov	r0, r5
 8001340:	4621      	mov	r1, r4
 8001342:	f7ff ff59 	bl	80011f8 <__sflush_r>
 8001346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001348:	07da      	lsls	r2, r3, #31
 800134a:	4605      	mov	r5, r0
 800134c:	d4e0      	bmi.n	8001310 <_fflush_r+0xc>
 800134e:	89a3      	ldrh	r3, [r4, #12]
 8001350:	059b      	lsls	r3, r3, #22
 8001352:	d4dd      	bmi.n	8001310 <_fflush_r+0xc>
 8001354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001356:	f7ff fa96 	bl	8000886 <__retarget_lock_release_recursive>
 800135a:	e7d9      	b.n	8001310 <_fflush_r+0xc>
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <_fflush_r+0x70>)
 800135e:	429c      	cmp	r4, r3
 8001360:	d101      	bne.n	8001366 <_fflush_r+0x62>
 8001362:	68ac      	ldr	r4, [r5, #8]
 8001364:	e7df      	b.n	8001326 <_fflush_r+0x22>
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <_fflush_r+0x74>)
 8001368:	429c      	cmp	r4, r3
 800136a:	bf08      	it	eq
 800136c:	68ec      	ldreq	r4, [r5, #12]
 800136e:	e7da      	b.n	8001326 <_fflush_r+0x22>
 8001370:	080015d8 	.word	0x080015d8
 8001374:	080015f8 	.word	0x080015f8
 8001378:	080015b8 	.word	0x080015b8

0800137c <_lseek_r>:
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	4d07      	ldr	r5, [pc, #28]	; (800139c <_lseek_r+0x20>)
 8001380:	4604      	mov	r4, r0
 8001382:	4608      	mov	r0, r1
 8001384:	4611      	mov	r1, r2
 8001386:	2200      	movs	r2, #0
 8001388:	602a      	str	r2, [r5, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	f7ff f810 	bl	80003b0 <_lseek>
 8001390:	1c43      	adds	r3, r0, #1
 8001392:	d102      	bne.n	800139a <_lseek_r+0x1e>
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	b103      	cbz	r3, 800139a <_lseek_r+0x1e>
 8001398:	6023      	str	r3, [r4, #0]
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	20000090 	.word	0x20000090

080013a0 <__swhatbuf_r>:
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	460e      	mov	r6, r1
 80013a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013a8:	2900      	cmp	r1, #0
 80013aa:	b096      	sub	sp, #88	; 0x58
 80013ac:	4614      	mov	r4, r2
 80013ae:	461d      	mov	r5, r3
 80013b0:	da08      	bge.n	80013c4 <__swhatbuf_r+0x24>
 80013b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	602a      	str	r2, [r5, #0]
 80013ba:	061a      	lsls	r2, r3, #24
 80013bc:	d410      	bmi.n	80013e0 <__swhatbuf_r+0x40>
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	e00e      	b.n	80013e2 <__swhatbuf_r+0x42>
 80013c4:	466a      	mov	r2, sp
 80013c6:	f000 f8bb 	bl	8001540 <_fstat_r>
 80013ca:	2800      	cmp	r0, #0
 80013cc:	dbf1      	blt.n	80013b2 <__swhatbuf_r+0x12>
 80013ce:	9a01      	ldr	r2, [sp, #4]
 80013d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80013d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80013d8:	425a      	negs	r2, r3
 80013da:	415a      	adcs	r2, r3
 80013dc:	602a      	str	r2, [r5, #0]
 80013de:	e7ee      	b.n	80013be <__swhatbuf_r+0x1e>
 80013e0:	2340      	movs	r3, #64	; 0x40
 80013e2:	2000      	movs	r0, #0
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	b016      	add	sp, #88	; 0x58
 80013e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080013ec <__smakebuf_r>:
 80013ec:	898b      	ldrh	r3, [r1, #12]
 80013ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013f0:	079d      	lsls	r5, r3, #30
 80013f2:	4606      	mov	r6, r0
 80013f4:	460c      	mov	r4, r1
 80013f6:	d507      	bpl.n	8001408 <__smakebuf_r+0x1c>
 80013f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013fc:	6023      	str	r3, [r4, #0]
 80013fe:	6123      	str	r3, [r4, #16]
 8001400:	2301      	movs	r3, #1
 8001402:	6163      	str	r3, [r4, #20]
 8001404:	b002      	add	sp, #8
 8001406:	bd70      	pop	{r4, r5, r6, pc}
 8001408:	ab01      	add	r3, sp, #4
 800140a:	466a      	mov	r2, sp
 800140c:	f7ff ffc8 	bl	80013a0 <__swhatbuf_r>
 8001410:	9900      	ldr	r1, [sp, #0]
 8001412:	4605      	mov	r5, r0
 8001414:	4630      	mov	r0, r6
 8001416:	f7ff fa57 	bl	80008c8 <_malloc_r>
 800141a:	b948      	cbnz	r0, 8001430 <__smakebuf_r+0x44>
 800141c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001420:	059a      	lsls	r2, r3, #22
 8001422:	d4ef      	bmi.n	8001404 <__smakebuf_r+0x18>
 8001424:	f023 0303 	bic.w	r3, r3, #3
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	81a3      	strh	r3, [r4, #12]
 800142e:	e7e3      	b.n	80013f8 <__smakebuf_r+0xc>
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <__smakebuf_r+0x7c>)
 8001432:	62b3      	str	r3, [r6, #40]	; 0x28
 8001434:	89a3      	ldrh	r3, [r4, #12]
 8001436:	6020      	str	r0, [r4, #0]
 8001438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143c:	81a3      	strh	r3, [r4, #12]
 800143e:	9b00      	ldr	r3, [sp, #0]
 8001440:	6163      	str	r3, [r4, #20]
 8001442:	9b01      	ldr	r3, [sp, #4]
 8001444:	6120      	str	r0, [r4, #16]
 8001446:	b15b      	cbz	r3, 8001460 <__smakebuf_r+0x74>
 8001448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800144c:	4630      	mov	r0, r6
 800144e:	f000 f889 	bl	8001564 <_isatty_r>
 8001452:	b128      	cbz	r0, 8001460 <__smakebuf_r+0x74>
 8001454:	89a3      	ldrh	r3, [r4, #12]
 8001456:	f023 0303 	bic.w	r3, r3, #3
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	81a3      	strh	r3, [r4, #12]
 8001460:	89a0      	ldrh	r0, [r4, #12]
 8001462:	4305      	orrs	r5, r0
 8001464:	81a5      	strh	r5, [r4, #12]
 8001466:	e7cd      	b.n	8001404 <__smakebuf_r+0x18>
 8001468:	080006e1 	.word	0x080006e1

0800146c <__malloc_lock>:
 800146c:	4801      	ldr	r0, [pc, #4]	; (8001474 <__malloc_lock+0x8>)
 800146e:	f7ff ba09 	b.w	8000884 <__retarget_lock_acquire_recursive>
 8001472:	bf00      	nop
 8001474:	20000084 	.word	0x20000084

08001478 <__malloc_unlock>:
 8001478:	4801      	ldr	r0, [pc, #4]	; (8001480 <__malloc_unlock+0x8>)
 800147a:	f7ff ba04 	b.w	8000886 <__retarget_lock_release_recursive>
 800147e:	bf00      	nop
 8001480:	20000084 	.word	0x20000084

08001484 <_free_r>:
 8001484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001486:	2900      	cmp	r1, #0
 8001488:	d044      	beq.n	8001514 <_free_r+0x90>
 800148a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800148e:	9001      	str	r0, [sp, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	f1a1 0404 	sub.w	r4, r1, #4
 8001496:	bfb8      	it	lt
 8001498:	18e4      	addlt	r4, r4, r3
 800149a:	f7ff ffe7 	bl	800146c <__malloc_lock>
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <_free_r+0x94>)
 80014a0:	9801      	ldr	r0, [sp, #4]
 80014a2:	6813      	ldr	r3, [r2, #0]
 80014a4:	b933      	cbnz	r3, 80014b4 <_free_r+0x30>
 80014a6:	6063      	str	r3, [r4, #4]
 80014a8:	6014      	str	r4, [r2, #0]
 80014aa:	b003      	add	sp, #12
 80014ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80014b0:	f7ff bfe2 	b.w	8001478 <__malloc_unlock>
 80014b4:	42a3      	cmp	r3, r4
 80014b6:	d908      	bls.n	80014ca <_free_r+0x46>
 80014b8:	6825      	ldr	r5, [r4, #0]
 80014ba:	1961      	adds	r1, r4, r5
 80014bc:	428b      	cmp	r3, r1
 80014be:	bf01      	itttt	eq
 80014c0:	6819      	ldreq	r1, [r3, #0]
 80014c2:	685b      	ldreq	r3, [r3, #4]
 80014c4:	1949      	addeq	r1, r1, r5
 80014c6:	6021      	streq	r1, [r4, #0]
 80014c8:	e7ed      	b.n	80014a6 <_free_r+0x22>
 80014ca:	461a      	mov	r2, r3
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	b10b      	cbz	r3, 80014d4 <_free_r+0x50>
 80014d0:	42a3      	cmp	r3, r4
 80014d2:	d9fa      	bls.n	80014ca <_free_r+0x46>
 80014d4:	6811      	ldr	r1, [r2, #0]
 80014d6:	1855      	adds	r5, r2, r1
 80014d8:	42a5      	cmp	r5, r4
 80014da:	d10b      	bne.n	80014f4 <_free_r+0x70>
 80014dc:	6824      	ldr	r4, [r4, #0]
 80014de:	4421      	add	r1, r4
 80014e0:	1854      	adds	r4, r2, r1
 80014e2:	42a3      	cmp	r3, r4
 80014e4:	6011      	str	r1, [r2, #0]
 80014e6:	d1e0      	bne.n	80014aa <_free_r+0x26>
 80014e8:	681c      	ldr	r4, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	6053      	str	r3, [r2, #4]
 80014ee:	4421      	add	r1, r4
 80014f0:	6011      	str	r1, [r2, #0]
 80014f2:	e7da      	b.n	80014aa <_free_r+0x26>
 80014f4:	d902      	bls.n	80014fc <_free_r+0x78>
 80014f6:	230c      	movs	r3, #12
 80014f8:	6003      	str	r3, [r0, #0]
 80014fa:	e7d6      	b.n	80014aa <_free_r+0x26>
 80014fc:	6825      	ldr	r5, [r4, #0]
 80014fe:	1961      	adds	r1, r4, r5
 8001500:	428b      	cmp	r3, r1
 8001502:	bf04      	itt	eq
 8001504:	6819      	ldreq	r1, [r3, #0]
 8001506:	685b      	ldreq	r3, [r3, #4]
 8001508:	6063      	str	r3, [r4, #4]
 800150a:	bf04      	itt	eq
 800150c:	1949      	addeq	r1, r1, r5
 800150e:	6021      	streq	r1, [r4, #0]
 8001510:	6054      	str	r4, [r2, #4]
 8001512:	e7ca      	b.n	80014aa <_free_r+0x26>
 8001514:	b003      	add	sp, #12
 8001516:	bd30      	pop	{r4, r5, pc}
 8001518:	20000088 	.word	0x20000088

0800151c <_read_r>:
 800151c:	b538      	push	{r3, r4, r5, lr}
 800151e:	4d07      	ldr	r5, [pc, #28]	; (800153c <_read_r+0x20>)
 8001520:	4604      	mov	r4, r0
 8001522:	4608      	mov	r0, r1
 8001524:	4611      	mov	r1, r2
 8001526:	2200      	movs	r2, #0
 8001528:	602a      	str	r2, [r5, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	f7fe fee0 	bl	80002f0 <_read>
 8001530:	1c43      	adds	r3, r0, #1
 8001532:	d102      	bne.n	800153a <_read_r+0x1e>
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	b103      	cbz	r3, 800153a <_read_r+0x1e>
 8001538:	6023      	str	r3, [r4, #0]
 800153a:	bd38      	pop	{r3, r4, r5, pc}
 800153c:	20000090 	.word	0x20000090

08001540 <_fstat_r>:
 8001540:	b538      	push	{r3, r4, r5, lr}
 8001542:	4d07      	ldr	r5, [pc, #28]	; (8001560 <_fstat_r+0x20>)
 8001544:	2300      	movs	r3, #0
 8001546:	4604      	mov	r4, r0
 8001548:	4608      	mov	r0, r1
 800154a:	4611      	mov	r1, r2
 800154c:	602b      	str	r3, [r5, #0]
 800154e:	f7fe ff14 	bl	800037a <_fstat>
 8001552:	1c43      	adds	r3, r0, #1
 8001554:	d102      	bne.n	800155c <_fstat_r+0x1c>
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	b103      	cbz	r3, 800155c <_fstat_r+0x1c>
 800155a:	6023      	str	r3, [r4, #0]
 800155c:	bd38      	pop	{r3, r4, r5, pc}
 800155e:	bf00      	nop
 8001560:	20000090 	.word	0x20000090

08001564 <_isatty_r>:
 8001564:	b538      	push	{r3, r4, r5, lr}
 8001566:	4d06      	ldr	r5, [pc, #24]	; (8001580 <_isatty_r+0x1c>)
 8001568:	2300      	movs	r3, #0
 800156a:	4604      	mov	r4, r0
 800156c:	4608      	mov	r0, r1
 800156e:	602b      	str	r3, [r5, #0]
 8001570:	f7fe ff13 	bl	800039a <_isatty>
 8001574:	1c43      	adds	r3, r0, #1
 8001576:	d102      	bne.n	800157e <_isatty_r+0x1a>
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	b103      	cbz	r3, 800157e <_isatty_r+0x1a>
 800157c:	6023      	str	r3, [r4, #0]
 800157e:	bd38      	pop	{r3, r4, r5, pc}
 8001580:	20000090 	.word	0x20000090

08001584 <_init>:
 8001584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001586:	bf00      	nop
 8001588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158a:	bc08      	pop	{r3}
 800158c:	469e      	mov	lr, r3
 800158e:	4770      	bx	lr

08001590 <_fini>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	bf00      	nop
 8001594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001596:	bc08      	pop	{r3}
 8001598:	469e      	mov	lr, r3
 800159a:	4770      	bx	lr
