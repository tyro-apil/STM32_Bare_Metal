
11_input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003f4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006d2  00000000  00000000  00010424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000186  00000000  00000000  00010af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eac1  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c41  00000000  00000000  0001f809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053bb2  00000000  00000000  0002044a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00073ffc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  0007404c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003d4 	.word	0x080003d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003d4 	.word	0x080003d4

080001d8 <main>:
#include "tim.h"

int capture_value;

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	tim2_pa5_output_compare();
 80001dc:	f000 f814 	bl	8000208 <tim2_pa5_output_compare>
	tim5_ch1_input_capture();
 80001e0:	f000 f862 	bl	80002a8 <tim5_ch1_input_capture>

	while(1)
	{
		/*wait for input capture flag : Bit 1*/
		while(!(TIM5->SR & SR_CC1IF)){}
 80001e4:	bf00      	nop
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <main+0x28>)
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <main+0xe>

		/*read input capture data from CCR1 register*/
		capture_value = TIM5->CCR1;
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <main+0x28>)
 80001f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b02      	ldr	r3, [pc, #8]	; (8000204 <main+0x2c>)
 80001fa:	601a      	str	r2, [r3, #0]
		while(!(TIM5->SR & SR_CC1IF)){}
 80001fc:	e7f2      	b.n	80001e4 <main+0xc>
 80001fe:	bf00      	nop
 8000200:	40000c00 	.word	0x40000c00
 8000204:	2000001c 	.word	0x2000001c

08000208 <tim2_pa5_output_compare>:
	/*Enable timer*/
	TIM2->CR1 |= CR1_EN;
}

void tim2_pa5_output_compare(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	/*****Configure PA5 to tim2_channel_1 alternate function******/
	RCC->AHB1ENR |= GPIOAEN;
 800020c:	4b24      	ldr	r3, [pc, #144]	; (80002a0 <tim2_pa5_output_compare+0x98>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a23      	ldr	r2, [pc, #140]	; (80002a0 <tim2_pa5_output_compare+0x98>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(1U<<10);
 8000218:	4b22      	ldr	r3, [pc, #136]	; (80002a4 <tim2_pa5_output_compare+0x9c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a21      	ldr	r2, [pc, #132]	; (80002a4 <tim2_pa5_output_compare+0x9c>)
 800021e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000222:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<0);
 8000224:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <tim2_pa5_output_compare+0x9c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <tim2_pa5_output_compare+0x9c>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= AFRL5_TIM2;
 8000230:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <tim2_pa5_output_compare+0x9c>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a1b      	ldr	r2, [pc, #108]	; (80002a4 <tim2_pa5_output_compare+0x9c>)
 8000236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800023a:	6213      	str	r3, [r2, #32]


	/***********Configure timer2 module***********/

	/*Enable clock access to APB1*/
	RCC->APB1ENR |= TIM2EN;
 800023c:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <tim2_pa5_output_compare+0x98>)
 800023e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000240:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <tim2_pa5_output_compare+0x98>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler*/
	TIM2->PSC = 1600 - 1; // 16 000 000 / 1 600 = 10 000
 8000248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024c:	f240 623f 	movw	r2, #1599	; 0x63f
 8000250:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value*/
	TIM2->ARR = 10000 - 1; // 10 000/ 10 000 = 1
 8000252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000256:	f242 720f 	movw	r2, #9999	; 0x270f
 800025a:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Set to output compare mode in CCMR1 to toggle mode*/
	TIM2->CCMR1 |= OC_TOGGLE;
 800025c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000266:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800026a:	6193      	str	r3, [r2, #24]

	/*Enable output mode through CCER*/
	TIM2->CCER |= OC_EN;
 800026c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000270:	6a1b      	ldr	r3, [r3, #32]
 8000272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6213      	str	r3, [r2, #32]

	/*Clear counter*/
	TIM2->CNT = 0;
 800027c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000280:	2200      	movs	r2, #0
 8000282:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable timer*/
	TIM2->CR1 |= CR1_EN;
 8000284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020000 	.word	0x40020000

080002a8 <tim5_ch1_input_capture>:


void tim5_ch1_input_capture(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	/***********Configure PA0 to alternate function type***********/
	/*Enable clock access to port A: AHB1 bus : Bit 0 = 1*/
	RCC->AHB1ENR |= GPIOAEN;
 80002ac:	4b1f      	ldr	r3, [pc, #124]	; (800032c <tim5_ch1_input_capture+0x84>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a1e      	ldr	r2, [pc, #120]	; (800032c <tim5_ch1_input_capture+0x84>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set MODER to alternate function mode: bit [1:0] = 10*/
	GPIOA->MODER &= ~(1U<<0);
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <tim5_ch1_input_capture+0x88>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <tim5_ch1_input_capture+0x88>)
 80002be:	f023 0301 	bic.w	r3, r3, #1
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 80002c4:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <tim5_ch1_input_capture+0x88>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a19      	ldr	r2, [pc, #100]	; (8000330 <tim5_ch1_input_capture+0x88>)
 80002ca:	f043 0302 	orr.w	r3, r3, #2
 80002ce:	6013      	str	r3, [r2, #0]

	/*Set AFR low register pin 0 to AF02: bit[3:0] = 0010*/
	GPIOA->AFR[0] |= AFRL0_TIM5;
 80002d0:	4b17      	ldr	r3, [pc, #92]	; (8000330 <tim5_ch1_input_capture+0x88>)
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	4a16      	ldr	r2, [pc, #88]	; (8000330 <tim5_ch1_input_capture+0x88>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6213      	str	r3, [r2, #32]


	/***********Configure tim5_ch1************/
	/*Enable clock access to APB1: TIM5 : Bit 3*/
	RCC->APB1ENR |= TIM5EN;
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <tim5_ch1_input_capture+0x84>)
 80002de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e0:	4a12      	ldr	r2, [pc, #72]	; (800032c <tim5_ch1_input_capture+0x84>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set pre-scaler : 16000*/
	TIM5->PSC = 16000 - 1; //16 000 000 / 16000
 80002e8:	4b12      	ldr	r3, [pc, #72]	; (8000334 <tim5_ch1_input_capture+0x8c>)
 80002ea:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set capture/compare mode register to input capture : Bits 1:0 = 01*/
	TIM5->CCMR1 |= CC1S_IC;
 80002f0:	4b10      	ldr	r3, [pc, #64]	; (8000334 <tim5_ch1_input_capture+0x8c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <tim5_ch1_input_capture+0x8c>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6193      	str	r3, [r2, #24]

	/*Enable capture at every edge: CC enable register: Bit 0 = 1*/
	TIM5->CCER |= CC1E_CAPTURE_EN;
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <tim5_ch1_input_capture+0x8c>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <tim5_ch1_input_capture+0x8c>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6213      	str	r3, [r2, #32]

	/*Enable capture as rising edge: CCER Bit 1 (Output Polarity) Bit 1 = 0 (Reset value)*/
	TIM5->CCER &= ~(CAPTURE_RISE_EDGE);
 8000308:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <tim5_ch1_input_capture+0x8c>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <tim5_ch1_input_capture+0x8c>)
 800030e:	f023 0302 	bic.w	r3, r3, #2
 8000312:	6213      	str	r3, [r2, #32]

	/*Enable TIM5: Control register 1 : Bit 0 = 1*/
	TIM5->CR1 |= CR1_EN;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <tim5_ch1_input_capture+0x8c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a06      	ldr	r2, [pc, #24]	; (8000334 <tim5_ch1_input_capture+0x8c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40023800 	.word	0x40023800
 8000330:	40020000 	.word	0x40020000
 8000334:	40000c00 	.word	0x40000c00

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ff35 	bl	80001d8 <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	20000020 	.word	0x20000020

08000388 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	4d0d      	ldr	r5, [pc, #52]	; (80003c4 <__libc_init_array+0x38>)
 8000390:	4c0d      	ldr	r4, [pc, #52]	; (80003c8 <__libc_init_array+0x3c>)
 8000392:	1b64      	subs	r4, r4, r5
 8000394:	10a4      	asrs	r4, r4, #2
 8000396:	2600      	movs	r6, #0
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	4d0b      	ldr	r5, [pc, #44]	; (80003cc <__libc_init_array+0x40>)
 800039e:	4c0c      	ldr	r4, [pc, #48]	; (80003d0 <__libc_init_array+0x44>)
 80003a0:	f000 f818 	bl	80003d4 <_init>
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	10a4      	asrs	r4, r4, #2
 80003a8:	2600      	movs	r6, #0
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
