
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b8  080003c0  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b8  080003b8  000103c0  2**0
                  CONTENTS
  4 .ARM          00000000  080003b8  080003b8  000103c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b8  080003c0  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004ca  00000000  00000000  000103f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000176  00000000  00000000  000108ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc48  00000000  00000000  00010ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005c4  00000000  00000000  0001e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fadc  00000000  00000000  0001ecf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006e7d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  0006e820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003a0 	.word	0x080003a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003a0 	.word	0x080003a0

080001d8 <main>:
void usart_write(int ch);
void usart2_init(void);


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0

	usart2_init();
 80001de:	f000 f807 	bl	80001f0 <usart2_init>

	while(1)
	{
		int ch = 'C';
 80001e2:	2343      	movs	r3, #67	; 0x43
 80001e4:	607b      	str	r3, [r7, #4]
		usart_write(ch);
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f000 f874 	bl	80002d4 <usart_write>
	{
 80001ec:	e7f9      	b.n	80001e2 <main+0xa>
	...

080001f0 <usart2_init>:
	}
}

void usart2_init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	/********Configure GPIOA pin 2 to desired alternate function********/
	/*clock access enable*/
	RCC->AHB1ENR |= GPIOAEN;
 80001f4:	4b20      	ldr	r3, [pc, #128]	; (8000278 <usart2_init+0x88>)
 80001f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f8:	4a1f      	ldr	r2, [pc, #124]	; (8000278 <usart2_init+0x88>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6313      	str	r3, [r2, #48]	; 0x30

	/*Change in MODER to alternate function mode*/
	GPIOA->MODER &= ~(1U<<4);
 8000200:	4b1e      	ldr	r3, [pc, #120]	; (800027c <usart2_init+0x8c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1d      	ldr	r2, [pc, #116]	; (800027c <usart2_init+0x8c>)
 8000206:	f023 0310 	bic.w	r3, r3, #16
 800020a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800020c:	4b1b      	ldr	r3, [pc, #108]	; (800027c <usart2_init+0x8c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1a      	ldr	r2, [pc, #104]	; (800027c <usart2_init+0x8c>)
 8000212:	f043 0320 	orr.w	r3, r3, #32
 8000216:	6013      	str	r3, [r2, #0]

	/*Alternate Function Type Register (which type of alternate function to operate*/
	GPIOA->AFR[0] |= (1U<<8);
 8000218:	4b18      	ldr	r3, [pc, #96]	; (800027c <usart2_init+0x8c>)
 800021a:	6a1b      	ldr	r3, [r3, #32]
 800021c:	4a17      	ldr	r2, [pc, #92]	; (800027c <usart2_init+0x8c>)
 800021e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000222:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000224:	4b15      	ldr	r3, [pc, #84]	; (800027c <usart2_init+0x8c>)
 8000226:	6a1b      	ldr	r3, [r3, #32]
 8000228:	4a14      	ldr	r2, [pc, #80]	; (800027c <usart2_init+0x8c>)
 800022a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800022e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000230:	4b12      	ldr	r3, [pc, #72]	; (800027c <usart2_init+0x8c>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a11      	ldr	r2, [pc, #68]	; (800027c <usart2_init+0x8c>)
 8000236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800023a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <usart2_init+0x8c>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a0e      	ldr	r2, [pc, #56]	; (800027c <usart2_init+0x8c>)
 8000242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000246:	6213      	str	r3, [r2, #32]


	/***********Configure USART2 module**********/
	/*clock access enable(APB1 bus)*/
	RCC->APB1ENR |= USART2EN;
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <usart2_init+0x88>)
 800024a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800024c:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <usart2_init+0x88>)
 800024e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000252:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure Baud Rate(Store in baud rate register(BRR) of USART_Typedef*/
	usart_set_baud_rate(USART2, APB1_CLK, BAUD_RATE);
 8000254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000258:	4909      	ldr	r1, [pc, #36]	; (8000280 <usart2_init+0x90>)
 800025a:	480a      	ldr	r0, [pc, #40]	; (8000284 <usart2_init+0x94>)
 800025c:	f000 f814 	bl	8000288 <usart_set_baud_rate>

	/*Enable USART_TX*/
	USART2->CR1 = USART_TE; //why not bitwise OR?? - Set all bits except TE to 0
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <usart2_init+0x94>)
 8000262:	2208      	movs	r2, #8
 8000264:	60da      	str	r2, [r3, #12]

	/*Enable USART communication*/
	USART2->CR1 |= USART_EN;
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <usart2_init+0x94>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <usart2_init+0x94>)
 800026c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000270:	60d3      	str	r3, [r2, #12]

}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40020000 	.word	0x40020000
 8000280:	00f42400 	.word	0x00f42400
 8000284:	40004400 	.word	0x40004400

08000288 <usart_set_baud_rate>:


static void usart_set_baud_rate(USART_TypeDef* USARTx, uint32_t periph_clk, uint32_t baudrate)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	USARTx->BRR = calculate_usart_bd(periph_clk, baudrate);
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	68b8      	ldr	r0, [r7, #8]
 8000298:	f000 f808 	bl	80002ac <calculate_usart_bd>
 800029c:	4603      	mov	r3, r0
 800029e:	461a      	mov	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	609a      	str	r2, [r3, #8]
}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <calculate_usart_bd>:

uint16_t calculate_usart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U)) / baudrate); //EMPIRICAL FORMULA
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	085a      	lsrs	r2, r3, #1
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	441a      	add	r2, r3
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c4:	b29b      	uxth	r3, r3
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
	...

080002d4 <usart_write>:

void usart_write(int ch)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & USART_TXE)){}
 80002dc:	bf00      	nop
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <usart_write+0x2c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <usart_write+0xa>

	/*Write data*/
	USART2->DR = (ch & 0XFF);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <usart_write+0x2c>)
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	6053      	str	r3, [r2, #4]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40004400 	.word	0x40004400

08000304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000304:	480d      	ldr	r0, [pc, #52]	; (800033c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000306:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000308:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <LoopForever+0x6>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	; (8000344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	; (8000348 <LoopForever+0xe>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	; (800034c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	; (8000350 <LoopForever+0x16>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000332:	f000 f811 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000336:	f7ff ff4f 	bl	80001d8 <main>

0800033a <LoopForever>:

LoopForever:
  b LoopForever
 800033a:	e7fe      	b.n	800033a <LoopForever>
  ldr   r0, =_estack
 800033c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000348:	080003c0 	.word	0x080003c0
  ldr r2, =_sbss
 800034c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000350:	2000001c 	.word	0x2000001c

08000354 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC_IRQHandler>
	...

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	4d0d      	ldr	r5, [pc, #52]	; (8000390 <__libc_init_array+0x38>)
 800035c:	4c0d      	ldr	r4, [pc, #52]	; (8000394 <__libc_init_array+0x3c>)
 800035e:	1b64      	subs	r4, r4, r5
 8000360:	10a4      	asrs	r4, r4, #2
 8000362:	2600      	movs	r6, #0
 8000364:	42a6      	cmp	r6, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	4d0b      	ldr	r5, [pc, #44]	; (8000398 <__libc_init_array+0x40>)
 800036a:	4c0c      	ldr	r4, [pc, #48]	; (800039c <__libc_init_array+0x44>)
 800036c:	f000 f818 	bl	80003a0 <_init>
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	10a4      	asrs	r4, r4, #2
 8000374:	2600      	movs	r6, #0
 8000376:	42a6      	cmp	r6, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000380:	4798      	blx	r3
 8000382:	3601      	adds	r6, #1
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	f855 3b04 	ldr.w	r3, [r5], #4
 800038a:	4798      	blx	r3
 800038c:	3601      	adds	r6, #1
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003b8 	.word	0x080003b8
 8000394:	080003b8 	.word	0x080003b8
 8000398:	080003b8 	.word	0x080003b8
 800039c:	080003bc 	.word	0x080003bc

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
